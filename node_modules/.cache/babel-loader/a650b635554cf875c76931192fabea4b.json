{"ast":null,"code":"var _jsxFileName = \"/home/vipl039/Documents/assignments/leucine_tech/src/container/FormContainer.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Button from '../contents/Button/Button';\nimport InputBox from '../contents/InputBox/InputBox';\nimport SelectBox from '../contents/selectBox/SelectBox';\nimport fetchData from '../modules/NetworkAdapter';\nimport { FETCH_TARGET_RESIDUE_TYPE } from '../constants/config';\nimport CardContents from '../contents/CardContents';\n\nclass FormContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      target_residue_type_list: [],\n      contents: null,\n      bioburdenComponents: null,\n      dataList: {}\n    };\n  }\n\n  componentDidMount() {\n    fetchData.getJson(FETCH_TARGET_RESIDUE_TYPE).then(res => {\n      this.setState({\n        target_residue_type_list: res\n      });\n    });\n  }\n\n  setLQD_LODValues(data) {\n    console.log(\"all values\", data, this.state);\n  }\n\n  targetResidueType(e) {\n    this.setState({\n      contents: null,\n      bioburdenComponents: null\n    });\n    let target_residue_type = ReactDOM.findDOMNode(this.refs.target_residue_type.refs.input).value;\n    this.setState({\n      target_residue_type: ReactDOM.findDOMNode(this.refs.target_residue_type.refs.input).value\n    }, () => {\n      switch (target_residue_type) {\n        case \"API\":\n          this.setState({\n            contents: React.createElement(CardContents, {\n              fieldSet: [\"LOD\", \"LOQ\"],\n              setLQD_LODValues: this.setLQD_LODValues.bind(this),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 36\n              },\n              __self: this\n            })\n          });\n          return this;\n\n        case \"CLEANING_AGENT\":\n          this.setState({\n            contents: React.createElement(CardContents, {\n              fieldSet: [\"LOD\", \"LOQ\"],\n              setLQD_LODValues: this.setLQD_LODValues.bind(this),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 39\n              },\n              __self: this\n            })\n          });\n          return this;\n\n        case \"BIOBURDER\":\n          this.setState({\n            bioburdenComponents: true,\n            contents: React.createElement(CardContents, {\n              fieldSet: [\"LNTC/TFTC\"],\n              bioburdenComponents: true,\n              setLQD_LODValues: this.setLQD_LODValues.bind(this),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 44\n              },\n              __self: this\n            })\n          });\n          return this;\n\n        case \"ENDOTOXIN\":\n          this.setState({\n            contents: React.createElement(CardContents, {\n              fieldSet: [\"LNTC/TFTC\"],\n              bioburdenComponents: true,\n              setLQD_LODValues: this.setLQD_LODValues.bind(this),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 48\n              },\n              __self: this\n            })\n          });\n          return this;\n      }\n    });\n  }\n\n  render() {\n    console.log(\"all state\", this.state);\n    return React.createElement(\"div\", {\n      className: \"form-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"box-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(InputBox, {\n      label: \"Analytical Method ID\",\n      isRequired: true,\n      type: \"text\",\n      ref: \"analytical_method_ID\",\n      updateValue: e => {\n        this.setState({\n          analytical_method_ID: ReactDOM.findDOMNode(this.refs.analytical_method_ID.refs.input).value\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), React.createElement(SelectBox, {\n      label: \"Target Residue Type\",\n      isRequired: true,\n      type: \"select\",\n      ref: \"target_residue_type\",\n      options: this.state.target_residue_type_list,\n      updateValue: this.targetResidueType.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), this.state.bioburdenComponents ? React.createElement(InputBox, {\n      label: \"Method Used\",\n      isRequired: true,\n      type: \"text\",\n      ref: \"method_used\",\n      updateValue: e => {\n        this.setState({\n          method_used: ReactDOM.findDOMNode(this.refs.method_used.refs.input).value\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }) : null, React.createElement(\"div\", {\n      className: \"selected-content-area\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, this.state.contents), React.createElement(InputBox, {\n      label: \"reason\",\n      isRequired: true,\n      type: \"text\",\n      ref: \"reason\",\n      updateValue: e => {\n        this.setState({\n          reason: ReactDOM.findDOMNode(this.refs.reason.refs.input).value\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default FormContainer;","map":{"version":3,"sources":["/home/vipl039/Documents/assignments/leucine_tech/src/container/FormContainer.js"],"names":["React","ReactDOM","Button","InputBox","SelectBox","fetchData","FETCH_TARGET_RESIDUE_TYPE","CardContents","FormContainer","Component","constructor","props","state","target_residue_type_list","contents","bioburdenComponents","dataList","componentDidMount","getJson","then","res","setState","setLQD_LODValues","data","console","log","targetResidueType","e","target_residue_type","findDOMNode","refs","input","value","bind","render","analytical_method_ID","method_used","reason"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Button from '../contents/Button/Button';\nimport InputBox from '../contents/InputBox/InputBox';\nimport SelectBox from '../contents/selectBox/SelectBox';\nimport fetchData from '../modules/NetworkAdapter';\nimport {FETCH_TARGET_RESIDUE_TYPE} from '../constants/config';\nimport CardContents from '../contents/CardContents';\nclass FormContainer extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            target_residue_type_list: [],\n            contents: null,\n            bioburdenComponents: null,\n            dataList: {}\n        }\n    }\n    componentDidMount(){\n        fetchData.getJson(FETCH_TARGET_RESIDUE_TYPE)\n        .then(res => {\n            this.setState({target_residue_type_list: res})\n        })\n    }\n    \n    setLQD_LODValues(data){\n        console.log(\"all values\", data, this.state)\n\n    }\n    targetResidueType(e){\n        this.setState({contents: null, bioburdenComponents: null})\n        let target_residue_type = ReactDOM.findDOMNode(this.refs.target_residue_type.refs.input).value;\n        this.setState({target_residue_type: ReactDOM.findDOMNode(this.refs.target_residue_type.refs.input).value}, () =>{\n            switch(target_residue_type){\n                case \"API\":\n                    this.setState({contents: <CardContents fieldSet={[\"LOD\",\"LOQ\"]} setLQD_LODValues={this.setLQD_LODValues.bind(this)} />})\n                    return this;\n                case \"CLEANING_AGENT\":\n                    this.setState({contents: <CardContents fieldSet={[\"LOD\",\"LOQ\"]} setLQD_LODValues={this.setLQD_LODValues.bind(this)} />})\n                    return this;\n                case \"BIOBURDER\":\n                    this.setState({\n                        bioburdenComponents: true,\n                        contents: <CardContents fieldSet={[\"LNTC/TFTC\"]} bioburdenComponents={true} setLQD_LODValues={this.setLQD_LODValues.bind(this)} />\n                    })\n                    return this;\n                case \"ENDOTOXIN\":\n                    this.setState({contents: <CardContents fieldSet={[\"LNTC/TFTC\"]} bioburdenComponents={true} setLQD_LODValues={this.setLQD_LODValues.bind(this)} />})\n                    return this;\n            }\n        });\n        \n    }\n    render(){\n        console.log(\"all state\", this.state);\n        return(\n            <div className=\"form-container\">\n                <div className=\"box-container\">\n                    <InputBox \n                        label={\"Analytical Method ID\"}\n                        isRequired={true}\n                        type={\"text\"}\n                        ref={\"analytical_method_ID\"}\n                        updateValue={(e) => {this.setState({analytical_method_ID: ReactDOM.findDOMNode(this.refs.analytical_method_ID.refs.input).value})}}\n                    />\n                    <SelectBox \n                        label={\"Target Residue Type\"}\n                        isRequired={true}\n                        type={\"select\"}\n                        ref={\"target_residue_type\"}\n                        options={this.state.target_residue_type_list}\n                        updateValue={this.targetResidueType.bind(this)}\n                    />\n                    {(this.state.bioburdenComponents) \n                            ?\n                        <InputBox \n                            label={\"Method Used\"}\n                            isRequired={true}\n                            type={\"text\"}\n                            ref={\"method_used\"}\n                            updateValue={(e) => {this.setState({method_used: ReactDOM.findDOMNode(this.refs.method_used.refs.input).value})}}\n                        />  \n                            : \n                        null\n                    }\n                    <div className=\"selected-content-area\">\n                        {this.state.contents}\n                    </div>\n                    <InputBox \n                        label={\"reason\"}\n                        isRequired={true}\n                        type={\"text\"}\n                        ref={\"reason\"}\n                        updateValue={(e) => {this.setState({reason: ReactDOM.findDOMNode(this.refs.reason.refs.input).value})}}\n                    />\n                </div>\n                \n            </div>\n        )\n    }\n}\nexport default FormContainer;"]},"metadata":{},"sourceType":"module"}