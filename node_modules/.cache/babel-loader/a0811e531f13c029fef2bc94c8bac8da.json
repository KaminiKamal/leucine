{"ast":null,"code":"var _jsxFileName = \"/home/vipl039/Documents/assignments/leucine_tech/src/contents/CardContents.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport InputBox from '../contents/InputBox/InputBox';\nimport DivButton from '../contents/DivButton/DivButton';\nimport Card from '../contents/Cards/Card';\nexport default class CardContents extends Component {\n  constructor(props) {\n    super(props);\n\n    this.displayCards = e => {\n      if (this.state.swabDisplay) {\n        this.setState({\n          divText: \"Remove swab sampling parameters\"\n        }, () => {\n          this.mountElements();\n        });\n      } else {\n        this.setState({\n          divText: \"Configure swab sampling parameter\"\n        }, () => {\n          this.unmountElements();\n        });\n      }\n    };\n\n    this.state = {\n      target_residue_type_list: [],\n      lod: \"\",\n      loq: \"\",\n      swabDisplay: false,\n      divText: \"Configure swab sampling parameter\",\n      displayDetails: null\n    };\n  }\n\n  callback() {\n    this.props.setLQD_LODValues(this.state);\n  }\n\n  mountElements() {\n    let nodeElement = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(Card, {\n      callback: this.callback.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }));\n    this.setState({\n      displayDetails: nodeElement\n    });\n  }\n\n  unmountElements() {}\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"card-contents\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card-content-items\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"display-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(InputBox, {\n      label: \"LOD (in ppm)\",\n      isRequired: true,\n      type: \"text\",\n      ref: \"lod\",\n      addInputStyle: \"input-box-half\",\n      addClass: \"input-box-container-half\",\n      updateValue: e => {\n        this.setState({\n          lod: ReactDOM.findDOMNode(this.refs.lod.refs.input).value\n        }, () => {\n          this.props.setLQD_LODValues(this.state);\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"display-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(InputBox, {\n      label: \"LOQ (in ppm)\",\n      isRequired: true,\n      type: \"text\",\n      ref: \"loq\",\n      addInputStyle: \"input-box-half\",\n      addClass: \"input-box-container-half\",\n      updateValue: e => {\n        this.setState({\n          loq: ReactDOM.findDOMNode(this.refs.loq.refs.input).value\n        }, () => {\n          this.props.setLQD_LODValues(this.state);\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"card-content-items\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(DivButton, {\n      ref: \"swab_sampling\",\n      text: this.state.divText,\n      updateValue: e => {\n        this.setState({\n          swabDisplay: !this.state.swabDisplay\n        }, () => {\n          this.displayCards();\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"card-content-displayDetails\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, this.state.displayDetails));\n  }\n\n}","map":{"version":3,"sources":["/home/vipl039/Documents/assignments/leucine_tech/src/contents/CardContents.js"],"names":["React","Component","ReactDOM","InputBox","DivButton","Card","CardContents","constructor","props","displayCards","e","state","swabDisplay","setState","divText","mountElements","unmountElements","target_residue_type_list","lod","loq","displayDetails","callback","setLQD_LODValues","nodeElement","bind","render","findDOMNode","refs","input","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport ReactDOM from 'react-dom';\nimport InputBox from '../contents/InputBox/InputBox';\nimport DivButton from '../contents/DivButton/DivButton';\nimport Card from '../contents/Cards/Card';\n\nexport default class CardContents extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            target_residue_type_list: [],\n            lod: \"\",\n            loq: \"\",\n            swabDisplay: false,\n            divText: `Configure swab sampling parameter`,\n            displayDetails: null\n\n        }\n    }\n\n    displayCards = (e) => {\n        if(this.state.swabDisplay){\n            this.setState({divText: `Remove swab sampling parameters`}, () => {\n                this.mountElements();\n            })\n        }\n        else{\n            this.setState({divText: `Configure swab sampling parameter`}, () => {\n                this.unmountElements();\n            })\n        }\n    }\n\n    callback(){\n        this.props.setLQD_LODValues(this.state);\n    }\n    mountElements(){\n        let nodeElement = (<div>\n            <Card callback={this.callback.bind(this)} />\n        </div>);\n        this.setState({displayDetails: nodeElement})\n\n    }\n\n    unmountElements(){\n\n    }\n\n    render() {\n        return (\n            <div className=\"card-contents\">\n                <div className=\"card-content-items\">\n                    <div className=\"display-box\">\n                        <InputBox \n                            label={\"LOD (in ppm)\"}\n                            isRequired={true}\n                            type={\"text\"}\n                            ref={\"lod\"}\n                            addInputStyle={`input-box-half`}\n                            addClass={`input-box-container-half`}\n                            updateValue={(e) =>{\n                                this.setState({\n                                    lod: ReactDOM.findDOMNode(this.refs.lod.refs.input).value\n                                },() => {\n                                    this.props.setLQD_LODValues(this.state);\n                                })\n                            }}\n                        />\n                    </div>\n                    <div className=\"display-box\">\n                        <InputBox \n                            label={\"LOQ (in ppm)\"}\n                            isRequired={true}\n                            type={\"text\"}\n                            ref={\"loq\"}\n                            addInputStyle={`input-box-half`}\n                            addClass={`input-box-container-half`}\n                            updateValue={(e) => {\n                                this.setState({\n                                    loq: ReactDOM.findDOMNode(this.refs.loq.refs.input).value\n                                }, () => {\n                                    this.props.setLQD_LODValues(this.state);\n                                });\n                            }}\n                        />\n                    </div>\n                   \n                </div>\n                <div className=\"card-content-items\">\n                    <DivButton \n                        ref={\"swab_sampling\"}\n                        text={this.state.divText}\n                        updateValue={(e) =>{\n                            this.setState({\n                                swabDisplay: !this.state.swabDisplay,\n                                \n                            },() => {\n                                this.displayCards();\n                            })\n                        }}\n                    />\n                </div>\n                <div className=\"card-content-displayDetails\">\n                    {this.state.displayDetails}\n                </div>\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}