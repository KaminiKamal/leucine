{"ast":null,"code":"var _jsxFileName = \"/home/vipl039/Documents/assignments/leucine_tech/src/contents/CardContents.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport InputBox from '../contents/InputBox/InputBox';\nimport RadioButton from '../contents/radio/radioButton';\nimport DivButton from '../contents/DivButton/DivButton';\nimport Card from '../contents/Cards/Card';\nimport _ from 'lodash';\nimport { SHOW_RINSE_PARAMETER, HIDE_RINSE_PARAMETER, SHOW_SWAB_PARAMETER, HIDE_SWAB_PARAMETER } from '../constants/config';\nexport default class CardContents extends Component {\n  constructor(props) {\n    super(props);\n\n    this.hideCards = cardType => {\n      switch (cardType) {\n        case HIDE_SWAB_PARAMETER:\n          this.setState({\n            swabDetails: null,\n            divText: \"Configure swab sampling parameter\",\n            addClassForSwab: null,\n            swabDisplay: false\n          });\n          return;\n\n        case HIDE_RINSE_PARAMETER:\n          this.setState({\n            rinseDetails: null,\n            rinseText: \"Configure rinse sampling parameter\",\n            addClassForRinse: null,\n            rinseDisplay: false\n          });\n          return;\n      }\n    };\n\n    this.displayCards = e => {\n      switch (e) {\n        case SHOW_SWAB_PARAMETER:\n          if (!this.state.swabDisplay) {\n            this.setState({\n              divText: \"Remove swab sampling parameters\",\n              addClassForSwab: \"nav-btn-container-rem\",\n              swabDisplay: true\n            }, () => {\n              let nodeElement = React.createElement(\"div\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 46\n                },\n                __self: this\n              }, React.createElement(Card, {\n                callback: this.callback.bind(this),\n                bioburdenComponents: this.props.bioburdenComponents,\n                isRequired: [\"SOLVENT_NAME\", \"SOLVENT_QUANTITY\"],\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 47\n                },\n                __self: this\n              }));\n              this.mountElements({\n                swabDetails: nodeElement\n              });\n            });\n          } else {\n            this.hideCards(HIDE_SWAB_PARAMETER);\n          }\n\n          return;\n\n        case SHOW_RINSE_PARAMETER:\n          if (!this.state.rinseDisplay) {\n            this.setState({\n              rinseText: \"Remove rinse sampling parameters\",\n              addClassForRinse: \"nav-btn-container-rem\",\n              rinseDisplay: true\n            }, () => {\n              let nodeElement = React.createElement(\"div\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 65\n                },\n                __self: this\n              }, React.createElement(Card, {\n                callback: this.callback.bind(this),\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 66\n                },\n                __self: this\n              }));\n              this.mountElements({\n                rinseDetails: nodeElement\n              });\n            });\n          } else {\n            this.hideCards(HIDE_RINSE_PARAMETER);\n          }\n\n          return;\n      }\n    };\n\n    this.state = {\n      target_residue_type_list: [],\n      lod: \"\",\n      loq: \"\",\n      lntc: \"\",\n      swabDisplay: false,\n      rinseDisplay: false,\n      divText: \"Configure swab sampling parameter\",\n      rinseText: \"Configure rinse sampling parameter\",\n      swabDetails: null,\n      rinseDetails: null,\n      addClassForSwab: null,\n      addClassForRinse: null\n    };\n  }\n\n  callback(data) {\n    this.props.setLQD_LODValues(data);\n  }\n\n  mountElements(cardDetails) {\n    this.setState(cardDetails);\n  }\n\n  getRadioButtonResponse(lntc) {\n    switch (lntc) {\n      case \"Yes\":\n        this.setState({\n          lntc: true\n        });\n        this.props.setLQD_LODValues({\n          lntc: true\n        });\n        return;\n\n      case \"No\":\n        this.setState({\n          lntc: false\n        });\n        this.props.setLQD_LODValues({\n          lntc: false\n        });\n        return;\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"card-contents\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card-content-items\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, this.props && this.props.fieldSet ? _.map(this.props.fieldSet, (element, index) => {\n      if (element === \"LOD\") {\n        return React.createElement(\"div\", {\n          className: \"display-box\",\n          key: \"LOD\" + index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        }, React.createElement(InputBox, {\n          label: \"LOD (in ppm)\",\n          isRequired: true,\n          type: \"text\",\n          ref: \"lod\",\n          addInputStyle: \"input-box-half\",\n          addClass: \"input-box-container-half\",\n          updateValue: e => {\n            this.setState({\n              lod: ReactDOM.findDOMNode(this.refs.lod.refs.input).value\n            }, () => {\n              this.props.setLQD_LODValues({\n                lod: this.state.lod\n              });\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }));\n      }\n\n      if (element === \"LOQ\") {\n        return React.createElement(\"div\", {\n          className: \"display-box\",\n          key: \"LOD\" + index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }, React.createElement(InputBox, {\n          label: \"LOQ (in ppm)\",\n          isRequired: true,\n          type: \"text\",\n          ref: \"loq\",\n          addInputStyle: \"input-box-half\",\n          addClass: \"input-box-container-half\",\n          updateValue: e => {\n            this.setState({\n              loq: ReactDOM.findDOMNode(this.refs.loq.refs.input).value\n            }, () => {\n              this.props.setLQD_LODValues({\n                loq: this.state.loq\n              });\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        }));\n      }\n    }) : null), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, this.props && this.props.bioburdenComponents ? \"Define TNTC and TFTC Limits\" : null), this.props && this.props.bioburdenComponents ? React.createElement(\"div\", {\n      className: \"card-content-items\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, _.map([0, 1], (el, i) => React.createElement(RadioButton, {\n      key: i + \"leucine\",\n      label: i == 0 ? \"Yes\" : \"No\",\n      isRequired: false,\n      type: \"radio\",\n      ref: i == 0 ? \"lntc_y\" : \"lntc_n\",\n      name: \"lntc\",\n      addInputStyle: \"input-box-half\",\n      addClass: \"input-box-container-half\",\n      updateValue: this.getRadioButtonResponse.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }))) : null, this.state.lntc ? React.createElement(\"div\", {\n      className: \"card-content-items\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"display-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(InputBox, {\n      label: \"LNTC (in CFU)\",\n      isRequired: true,\n      type: \"text\",\n      ref: \"lntc\",\n      addInputStyle: \"input-box-half\",\n      addClass: \"input-box-container-half\",\n      updateValue: e => {\n        this.setState({\n          lod: ReactDOM.findDOMNode(this.refs.lntc.refs.input).value\n        }, () => {\n          this.props.setLQD_LODValues({\n            lntc: this.state.lod\n          });\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"display-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, React.createElement(InputBox, {\n      label: \"LFTC (in CFU)\",\n      isRequired: true,\n      type: \"text\",\n      ref: \"lftc\",\n      addInputStyle: \"input-box-half\",\n      addClass: \"input-box-container-half\",\n      updateValue: e => {\n        this.setState({\n          lod: ReactDOM.findDOMNode(this.refs.lftc.refs.input).value\n        }, () => {\n          this.props.setLQD_LODValues({\n            lftc: this.state.lftc\n          });\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }))) : null, React.createElement(\"div\", {\n      className: \"card-content-items\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(DivButton, {\n      ref: \"swab_sampling\",\n      text: this.state.divText,\n      addClass: this.state.addClassForSwab,\n      updateValue: e => {\n        this.displayCards(SHOW_SWAB_PARAMETER);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    })), this.state.swabDetails ? React.createElement(\"div\", {\n      className: \"card-content-displayDetails\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, this.state.swabDetails) : null, React.createElement(\"div\", {\n      className: \"card-content-items\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, React.createElement(DivButton, {\n      ref: \"rinse_sampling\" //nav-btn-container-rem\n      ,\n      addClass: this.state.addClassForRinse,\n      text: this.state.rinseText,\n      updateValue: e => {\n        this.displayCards(SHOW_RINSE_PARAMETER);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    })), this.state.rinseDetails ? React.createElement(\"div\", {\n      className: \"card-content-displayDetails\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, this.state.rinseDetails) : null);\n  }\n\n}","map":{"version":3,"sources":["/home/vipl039/Documents/assignments/leucine_tech/src/contents/CardContents.js"],"names":["React","Component","ReactDOM","InputBox","RadioButton","DivButton","Card","_","SHOW_RINSE_PARAMETER","HIDE_RINSE_PARAMETER","SHOW_SWAB_PARAMETER","HIDE_SWAB_PARAMETER","CardContents","constructor","props","hideCards","cardType","setState","swabDetails","divText","addClassForSwab","swabDisplay","rinseDetails","rinseText","addClassForRinse","rinseDisplay","displayCards","e","state","nodeElement","callback","bind","bioburdenComponents","mountElements","target_residue_type_list","lod","loq","lntc","data","setLQD_LODValues","cardDetails","getRadioButtonResponse","render","fieldSet","map","element","index","findDOMNode","refs","input","value","el","i","lftc"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport ReactDOM from 'react-dom';\nimport InputBox from '../contents/InputBox/InputBox';\nimport RadioButton from '../contents/radio/radioButton';\nimport DivButton from '../contents/DivButton/DivButton';\nimport Card from '../contents/Cards/Card';\nimport _ from 'lodash';\nimport {SHOW_RINSE_PARAMETER, HIDE_RINSE_PARAMETER, SHOW_SWAB_PARAMETER, HIDE_SWAB_PARAMETER} from '../constants/config'\nexport default class CardContents extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            target_residue_type_list: [],\n            lod: \"\",\n            loq: \"\",\n            lntc: \"\",\n            swabDisplay: false,\n            rinseDisplay: false,\n            divText: `Configure swab sampling parameter`,\n            rinseText: `Configure rinse sampling parameter`,\n            swabDetails: null,\n            rinseDetails: null,\n            addClassForSwab: null,\n            addClassForRinse: null\n        }\n    }\n\n    hideCards = (cardType) => {\n        switch(cardType){\n            case HIDE_SWAB_PARAMETER:\n                this.setState({swabDetails: null, divText: `Configure swab sampling parameter`, addClassForSwab: null, swabDisplay: false})\n                return;\n            \n            case HIDE_RINSE_PARAMETER:\n                this.setState({rinseDetails: null, rinseText: `Configure rinse sampling parameter`, addClassForRinse: null, rinseDisplay: false})\n                return;\n        }\n    }\n\n    displayCards = (e) => {\n       \n        switch(e){\n            case SHOW_SWAB_PARAMETER:\n                if(!this.state.swabDisplay){\n                    this.setState({divText: `Remove swab sampling parameters`, addClassForSwab: `nav-btn-container-rem`, swabDisplay: true}, () => {\n                        let nodeElement = (<div>\n                            <Card \n                                callback={this.callback.bind(this)} \n                                bioburdenComponents={this.props.bioburdenComponents}\n                                isRequired={[\"SOLVENT_NAME\", \"SOLVENT_QUANTITY\"]}\n                            />\n                        </div>);\n                        this.mountElements({swabDetails: nodeElement});\n                    })\n                }\n                else{\n                    this.hideCards(HIDE_SWAB_PARAMETER);\n                }\n                \n                return;\n\n            case SHOW_RINSE_PARAMETER:\n                if(!this.state.rinseDisplay){\n                    this.setState({rinseText: `Remove rinse sampling parameters`, addClassForRinse: `nav-btn-container-rem`, rinseDisplay: true}, () => {\n                        let nodeElement = (<div>\n                            <Card \n                                callback={this.callback.bind(this)} \n                                \n                            />\n                        </div>);\n                        this.mountElements({rinseDetails: nodeElement});\n                    })\n                }\n                else{\n                    this.hideCards(HIDE_RINSE_PARAMETER);\n                }\n                \n                return;\n        }\n    }\n\n    callback(data){\n        this.props.setLQD_LODValues(data);\n    }\n\n    mountElements(cardDetails){\n        this.setState(cardDetails);\n    }\n\n    getRadioButtonResponse(lntc){\n        switch(lntc){\n            case \"Yes\": \n                this.setState({lntc: true});\n                this.props.setLQD_LODValues({lntc: true})\n                return;\n\n            case \"No\":\n                this.setState({lntc: false});\n                this.props.setLQD_LODValues({lntc: false})\n                return;\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"card-contents\">\n                \n                <div className=\"card-content-items\">\n                {\n                    (this.props && this.props.fieldSet)\n                    ?\n                    _.map(this.props.fieldSet, (element, index) => {\n                        if(element===\"LOD\"){\n                                return(\n                                    <div className=\"display-box\" key={`LOD`+index}>\n                                        <InputBox \n                                            label={\"LOD (in ppm)\"}\n                                            isRequired={true}\n                                            type={\"text\"}\n                                            ref={\"lod\"}\n                                            addInputStyle={`input-box-half`}\n                                            addClass={`input-box-container-half`}\n                                            updateValue={(e) =>{\n                                                this.setState({\n                                                    lod: ReactDOM.findDOMNode(this.refs.lod.refs.input).value\n                                                },() => {\n                                                    this.props.setLQD_LODValues({lod: this.state.lod});\n                                                })\n                                            }}\n                                        />\n                                    </div>\n                                )\n                        }\n                        if(element===\"LOQ\"){\n                            return(\n                                <div className=\"display-box\"  key={`LOD`+index}>\n                                    <InputBox \n                                        label={\"LOQ (in ppm)\"}\n                                        isRequired={true}\n                                        type={\"text\"}\n                                        ref={\"loq\"}\n                                        addInputStyle={`input-box-half`}\n                                        addClass={`input-box-container-half`}\n                                        updateValue={(e) =>{\n                                            this.setState({\n                                                loq: ReactDOM.findDOMNode(this.refs.loq.refs.input).value\n                                            },() => {\n                                                this.props.setLQD_LODValues({loq: this.state.loq});\n                                            })\n                                        }}\n                                    />\n                                </div>\n                            )\n                        }\n                        \n                    })\n                    :\n                    null\n                }\n                </div>\n\n                <label>{(this.props && this.props.bioburdenComponents) ? `Define TNTC and TFTC Limits` : null}</label>\n                {\n                    (this.props && this.props.bioburdenComponents\n                        ?\n                        <div className=\"card-content-items\">\n                            {\n                                _.map([0,1], (el, i) => (\n                                    <RadioButton \n                                        key={i+\"leucine\"}\n                                        label={(i==0 ? \"Yes\" : \"No\")}\n                                        isRequired={false}\n                                        type={\"radio\"}\n                                        ref={(i==0) ? \"lntc_y\" : \"lntc_n\"}\n                                        name={\"lntc\"}\n                                        addInputStyle={`input-box-half`}\n                                        addClass={`input-box-container-half`}\n                                        updateValue={this.getRadioButtonResponse.bind(this)}\n                                    />\n                                ))\n                            }\n                        </div>\n                        :\n                        null\n                    )\n                }\n                \n\n                {\n                    (this.state.lntc)\n                        ?\n                    <div className=\"card-content-items\">\n                        <div className=\"display-box\">\n                            <InputBox \n                                label={\"LNTC (in CFU)\"}\n                                isRequired={true}\n                                type={\"text\"}\n                                ref={\"lntc\"}\n                                addInputStyle={`input-box-half`}\n                                addClass={`input-box-container-half`}\n                                updateValue={(e) =>{\n                                    this.setState({\n                                        lod: ReactDOM.findDOMNode(this.refs.lntc.refs.input).value\n                                    },() => {\n                                        this.props.setLQD_LODValues({lntc: this.state.lod});\n                                    })\n                                }}\n                            />\n                        </div>\n                        <div className=\"display-box\">\n                            <InputBox \n                                label={\"LFTC (in CFU)\"}\n                                isRequired={true}\n                                type={\"text\"}\n                                ref={\"lftc\"}\n                                addInputStyle={`input-box-half`}\n                                addClass={`input-box-container-half`}\n                                updateValue={(e) =>{\n                                    this.setState({\n                                        lod: ReactDOM.findDOMNode(this.refs.lftc.refs.input).value\n                                    },() => {\n                                        this.props.setLQD_LODValues({lftc: this.state.lftc});\n                                    })\n                                }}\n                            />\n                        </div>\n                    </div>\n                        :\n                    null\n                }\n                \n                <div className=\"card-content-items\">\n                    <DivButton \n                        ref={\"swab_sampling\"}\n                        text={this.state.divText}\n                        addClass={this.state.addClassForSwab}\n                        updateValue={(e) =>{\n                                this.displayCards(SHOW_SWAB_PARAMETER);\n                            }\n                        }\n                    />\n                </div>\n                \n                    {(this.state.swabDetails)\n                        ?\n                    <div className=\"card-content-displayDetails\">\n                        {this.state.swabDetails}\n                    </div>\n                        :\n                        null\n                    }\n                \n                <div className=\"card-content-items\">\n                    <DivButton \n                        ref={\"rinse_sampling\"}//nav-btn-container-rem\n                        addClass={this.state.addClassForRinse}\n                        text={this.state.rinseText}\n                        updateValue={(e) =>{\n                                this.displayCards(SHOW_RINSE_PARAMETER);\n                            }\n                        }\n                    />\n                </div>\n                \n                {(this.state.rinseDetails)\n                        ?\n                    <div className=\"card-content-displayDetails\">\n                        {this.state.rinseDetails}\n                    </div>\n                        :\n                        null\n                    }\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}