{"ast":null,"code":"var _jsxFileName = \"/home/vipl039/Documents/assignments/leucine_tech/src/contents/Cards/Card.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './Card.scss';\nimport InputBox from '../InputBox/InputBox';\nimport DivButton from '../DivButton/DivButton';\nexport default class Card extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      swapSampling_API: {\n        method_used: \"\",\n        solvent_quantity: \"\",\n        solvent_name: \"\",\n        default_recovery: \"\"\n      },\n      moc_display: false,\n      divText: \"Add MOC\",\n      miniCard: []\n    };\n  } // callback(){\n  // }\n\n\n  populateMiniCards() {\n    let miniCards = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, React.createElement(InputBox, {\n      label: \"LOD (in ppm)\",\n      isRequired: true,\n      type: \"text\",\n      ref: \"lod\",\n      addInputStyle: \"input-box-half\",\n      addClass: \"input-box-container-half\",\n      updateValue: e => {\n        this.setState({\n          lod: ReactDOM.findDOMNode(this.refs.lod.refs.input).value\n        }, () => {\n          this.props.setLQD_LODValues(this.state);\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }));\n  }\n\n  removeMiniCards() {}\n\n  displayMiniCards() {\n    if (this.state.moc_display) {\n      this.setState({\n        divText: \"Remove MOC\"\n      }, () => {\n        this.populateMiniCards();\n      });\n    } else {\n      this.setState({\n        divText: \"Remove MOC\"\n      }, () => {\n        this.removeMiniCards();\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"card-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(InputBox, {\n      label: \"Method Used\",\n      isRequired: true,\n      type: \"text\",\n      ref: \"method_used\",\n      updateValue: e => {\n        this.setState({\n          swapSampling_API: {\n            method_used: ReactDOM.findDOMNode(this.refs.method_used.refs.input).value\n          }\n        }, () => {\n          this.props.callback(this.state);\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(InputBox, {\n      label: \"Solvent name\",\n      isRequired: true,\n      type: \"text\",\n      ref: \"solvent_name\",\n      addInputStyle: \"input-box-half\",\n      addClass: \"input-box-container-half\",\n      updateValue: e => {\n        this.setState({\n          swapSampling_API: {\n            solvent_name: ReactDOM.findDOMNode(this.refs.solvent_name.refs.input).value\n          }\n        }, () => {\n          this.props.callback(this.state);\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(InputBox, {\n      label: \"Solvent Quantity\",\n      isRequired: true,\n      type: \"text\",\n      ref: \"solvent_quantity\",\n      addInputStyle: \"input-box-half\",\n      addClass: \"input-box-container-half\",\n      updateValue: e => {\n        this.setState({\n          swapSampling_API: {\n            solvent_quantity: ReactDOM.findDOMNode(this.refs.solvent_quantity.refs.input).value\n          }\n        }, () => {\n          this.props.callback(this.state);\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }))), React.createElement(InputBox, {\n      label: \"Default Recovery\",\n      isRequired: true,\n      type: \"text\",\n      ref: \"default_recovery\",\n      updateValue: e => {\n        this.setState({\n          swapSampling_API: {\n            default_recovery: ReactDOM.findDOMNode(this.refs.default_recovery.refs.input).value\n          }\n        }, () => {\n          this.props.callback(this.state);\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(DivButton, {\n      ref: \"add_moc\",\n      text: this.state.divText,\n      updateValue: e => {\n        this.setState({\n          moc_display: !this.state.moc_display\n        }, () => {\n          this.displayMiniCards();\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }))));\n  }\n\n}","map":{"version":3,"sources":["/home/vipl039/Documents/assignments/leucine_tech/src/contents/Cards/Card.js"],"names":["React","Component","ReactDOM","InputBox","DivButton","Card","constructor","props","state","swapSampling_API","method_used","solvent_quantity","solvent_name","default_recovery","moc_display","divText","miniCard","populateMiniCards","miniCards","e","setState","lod","findDOMNode","refs","input","value","setLQD_LODValues","removeMiniCards","displayMiniCards","render","callback"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './Card.scss';\nimport InputBox from '../InputBox/InputBox';\nimport DivButton from '../DivButton/DivButton';\n\nexport default class Card extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            swapSampling_API: {\n                method_used: \"\",\n                solvent_quantity: \"\",\n                solvent_name: \"\",\n                default_recovery: \"\"\n            },\n            moc_display: false,\n            divText: `Add MOC`,\n            miniCard: []\n        }\n    }\n    // callback(){\n\n    // }\n    populateMiniCards(){\n        let miniCards = (\n            <div>\n                <InputBox \n                    label={\"LOD (in ppm)\"}\n                    isRequired={true}\n                    type={\"text\"}\n                    ref={\"lod\"}\n                    addInputStyle={`input-box-half`}\n                    addClass={`input-box-container-half`}\n                    updateValue={(e) =>{\n                        this.setState({\n                            lod: ReactDOM.findDOMNode(this.refs.lod.refs.input).value\n                        },() => {\n                            this.props.setLQD_LODValues(this.state);\n                        })\n                    }}\n                />\n            </div>\n        )\n    }\n    removeMiniCards(){\n\n    }\n    displayMiniCards(){\n        if(this.state.moc_display){\n            this.setState({ divText: `Remove MOC`}, () => {\n                this.populateMiniCards();\n            })\n        }\n        else{\n            this.setState({ divText: `Remove MOC`}, () => {\n                this.removeMiniCards();\n            })\n        }\n    }\n    render() {\n        return (\n            <div className=\"card-container\">\n                <div className=\"card-content\">\n                    <InputBox \n                        label={\"Method Used\"}\n                        isRequired={true}\n                        type={\"text\"}\n                        ref={\"method_used\"}\n                        updateValue={(e) =>{\n                            this.setState({\n                                swapSampling_API: {\n                                    method_used: ReactDOM.findDOMNode(this.refs.method_used.refs.input).value\n                                }\n                            },() => {\n                                this.props.callback(this.state);\n                            })\n                        }}\n                    />\n                    <div>\n                        <div>\n                            <InputBox \n                                label={\"Solvent name\"}\n                                isRequired={true}\n                                type={\"text\"}\n                                ref={\"solvent_name\"}\n                                addInputStyle={`input-box-half`}\n                                addClass={`input-box-container-half`}\n                                updateValue={(e) =>{\n                                    this.setState({\n                                        swapSampling_API:{\n                                            solvent_name: ReactDOM.findDOMNode(this.refs.solvent_name.refs.input).value\n                                        } \n                                    },() => {\n                                        this.props.callback(this.state);\n                                    })\n                                }}\n                            />\n                        </div>\n                        <div>\n                            <InputBox \n                                label={\"Solvent Quantity\"}\n                                isRequired={true}\n                                type={\"text\"}\n                                ref={\"solvent_quantity\"}\n                                addInputStyle={`input-box-half`}\n                                addClass={`input-box-container-half`}\n                                updateValue={(e) =>{\n                                    this.setState({\n                                        swapSampling_API:{\n                                            solvent_quantity: ReactDOM.findDOMNode(this.refs.solvent_quantity.refs.input).value\n                                        }\n                                    },() => {\n                                        this.props.callback(this.state);\n                                    })\n                                }}\n                            />\n                        </div>\n                    </div>\n                \n                    <InputBox \n                        label={\"Default Recovery\"}\n                        isRequired={true}\n                        type={\"text\"}\n                        ref={\"default_recovery\"}\n                        updateValue={(e) =>{\n                            this.setState({\n                                swapSampling_API:{\n                                    default_recovery: ReactDOM.findDOMNode(this.refs.default_recovery.refs.input).value\n                                } \n                            },() => {\n                                this.props.callback(this.state);\n                            })\n                        }}\n                    />\n                    <div>\n                        <DivButton \n                            ref={\"add_moc\"}\n                            text={this.state.divText}\n                            updateValue={(e) =>{\n                                this.setState({\n                                    moc_display: !this.state.moc_display,\n                                    \n                                },() => {\n                                    this.displayMiniCards();\n                                })\n                            }}\n                        />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}