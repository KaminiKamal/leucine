{"ast":null,"code":"var _jsxFileName = \"/home/vipl039/Documents/assignments/leucine_tech/src/contents/CardContents.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport InputBox from '../contents/InputBox/InputBox';\nimport DivButton from '../contents/DivButton/DivButton';\nimport Card from '../contents/Cards/Card';\nimport { SHOW_RINSE_PARAMETER, HIDE_RINSE_PARAMETER, SHOW_SWAB_PARAMETER, HIDE_SWAB_PARAMETER } from '../constants/config';\nexport default class CardContents extends Component {\n  constructor(props) {\n    super(props);\n\n    this.hideCards = cardType => {\n      switch (cardType) {\n        case HIDE_SWAB_PARAMETER:\n          this.setState({\n            swabDetails: null,\n            divText: \"Configure swab sampling parameter\",\n            swabDisplay: false\n          });\n          return;\n\n        case HIDE_RINSE_PARAMETER:\n          this.setState({\n            rinseDetails: null,\n            rinseText: \"Configure rinse sampling parameter\",\n            rinseDisplay: false\n          });\n          return;\n      }\n    };\n\n    this.displayCards = e => {\n      switch (e) {\n        case SHOW_SWAB_PARAMETER:\n          if (!this.state.swabDisplay) {\n            this.setState({\n              divText: \"Remove swab sampling parameters\",\n              swabDisplay: true\n            }, () => {\n              let nodeElement = React.createElement(\"div\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 39\n                },\n                __self: this\n              }, React.createElement(Card, {\n                callback: this.callback.bind(this),\n                isRequired: [\"SOLVENT_NAME\", \"SOLVENT_QUANTITY\"],\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 40\n                },\n                __self: this\n              }));\n              this.mountElements({\n                swabDetails: nodeElement\n              });\n            });\n          } else {\n            this.hideCards(HIDE_SWAB_PARAMETER);\n          }\n\n          return;\n\n        case SHOW_RINSE_PARAMETER:\n          if (!this.state.rinseDisplay) {\n            this.setState({\n              rinseText: \"Remove rinse sampling parameters\",\n              rinseDisplay: true\n            }, () => {\n              let nodeElement = React.createElement(\"div\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 57\n                },\n                __self: this\n              }, React.createElement(Card, {\n                callback: this.callback.bind(this),\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 58\n                },\n                __self: this\n              }));\n              this.mountElements({\n                rinseDetails: nodeElement\n              });\n            });\n          } else {\n            this.hideCards(HIDE_RINSE_PARAMETER);\n          }\n\n          return;\n      }\n    };\n\n    this.state = {\n      target_residue_type_list: [],\n      lod: \"\",\n      loq: \"\",\n      swabDisplay: false,\n      rinseDisplay: false,\n      divText: \"Configure swab sampling parameter\",\n      rinseText: \"Configure rinse sampling parameter\",\n      swabDetails: null,\n      rinseDetails: null\n    };\n  }\n\n  callback() {\n    this.props.setLQD_LODValues(this.state);\n  }\n\n  mountElements(cardDetails) {\n    this.setState(cardDetails);\n  }\n\n  unmountElements() {}\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"card-contents\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card-content-items\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"display-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(InputBox, {\n      label: \"LOD (in ppm)\",\n      isRequired: true,\n      type: \"text\",\n      ref: \"lod\",\n      addInputStyle: \"input-box-half\",\n      addClass: \"input-box-container-half\",\n      updateValue: e => {\n        this.setState({\n          lod: ReactDOM.findDOMNode(this.refs.lod.refs.input).value\n        }, () => {\n          this.props.setLQD_LODValues(this.state);\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"display-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(InputBox, {\n      label: \"LOQ (in ppm)\",\n      isRequired: true,\n      type: \"text\",\n      ref: \"loq\",\n      addInputStyle: \"input-box-half\",\n      addClass: \"input-box-container-half\",\n      updateValue: e => {\n        this.setState({\n          loq: ReactDOM.findDOMNode(this.refs.loq.refs.input).value\n        }, () => {\n          this.props.setLQD_LODValues(this.state);\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"card-content-items\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(DivButton, {\n      ref: \"swab_sampling\",\n      text: this.state.divText,\n      updateValue: e => {\n        this.displayCards(SHOW_SWAB_PARAMETER);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"card-content-displayDetails\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, this.state.swabDetails), React.createElement(\"div\", {\n      className: \"card-content-items\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(DivButton, {\n      ref: \"rinse_sampling\",\n      text: this.state.rinseText,\n      updateValue: e => {\n        this.displayCards(SHOW_RINSE_PARAMETER);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"card-content-displayDetails\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, this.state.rinseDetails));\n  }\n\n}","map":{"version":3,"sources":["/home/vipl039/Documents/assignments/leucine_tech/src/contents/CardContents.js"],"names":["React","Component","ReactDOM","InputBox","DivButton","Card","SHOW_RINSE_PARAMETER","HIDE_RINSE_PARAMETER","SHOW_SWAB_PARAMETER","HIDE_SWAB_PARAMETER","CardContents","constructor","props","hideCards","cardType","setState","swabDetails","divText","swabDisplay","rinseDetails","rinseText","rinseDisplay","displayCards","e","state","nodeElement","callback","bind","mountElements","target_residue_type_list","lod","loq","setLQD_LODValues","cardDetails","unmountElements","render","findDOMNode","refs","input","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport ReactDOM from 'react-dom';\nimport InputBox from '../contents/InputBox/InputBox';\nimport DivButton from '../contents/DivButton/DivButton';\nimport Card from '../contents/Cards/Card';\nimport {SHOW_RINSE_PARAMETER, HIDE_RINSE_PARAMETER, SHOW_SWAB_PARAMETER, HIDE_SWAB_PARAMETER} from '../constants/config'\nexport default class CardContents extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            target_residue_type_list: [],\n            lod: \"\",\n            loq: \"\",\n            swabDisplay: false,\n            rinseDisplay: false,\n            divText: `Configure swab sampling parameter`,\n            rinseText: `Configure rinse sampling parameter`,\n            swabDetails: null,\n            rinseDetails: null\n        }\n    }\n    hideCards = (cardType) => {\n        switch(cardType){\n            case HIDE_SWAB_PARAMETER:\n                this.setState({swabDetails: null, divText: `Configure swab sampling parameter`, swabDisplay: false})\n                return;\n            \n            case HIDE_RINSE_PARAMETER:\n                this.setState({rinseDetails: null, rinseText: `Configure rinse sampling parameter`, rinseDisplay: false})\n                return;\n        }\n    }\n    displayCards = (e) => {\n       \n        switch(e){\n            case SHOW_SWAB_PARAMETER:\n                if(!this.state.swabDisplay){\n                    this.setState({divText: `Remove swab sampling parameters`, swabDisplay: true}, () => {\n                        let nodeElement = (<div>\n                            <Card \n                                callback={this.callback.bind(this)} \n                                isRequired={[\"SOLVENT_NAME\", \"SOLVENT_QUANTITY\"]}\n                            />\n                        </div>);\n                        this.mountElements({swabDetails: nodeElement});\n                    })\n                }\n                else{\n                    this.hideCards(HIDE_SWAB_PARAMETER);\n                }\n                \n                return;\n\n            case SHOW_RINSE_PARAMETER:\n                if(!this.state.rinseDisplay){\n                    this.setState({rinseText: `Remove rinse sampling parameters`, rinseDisplay: true}, () => {\n                        let nodeElement = (<div>\n                            <Card \n                                callback={this.callback.bind(this)} \n                                \n                            />\n                        </div>);\n                        this.mountElements({rinseDetails: nodeElement});\n                    })\n                }\n                else{\n                    this.hideCards(HIDE_RINSE_PARAMETER);\n                }\n                \n                return;\n        }\n    }\n\n    callback(){\n        this.props.setLQD_LODValues(this.state);\n    }\n    mountElements(cardDetails){\n        this.setState(cardDetails);\n    }\n\n    unmountElements(){\n\n    }\n\n    render() {\n        return (\n            <div className=\"card-contents\">\n                <div className=\"card-content-items\">\n                    <div className=\"display-box\">\n                        <InputBox \n                            label={\"LOD (in ppm)\"}\n                            isRequired={true}\n                            type={\"text\"}\n                            ref={\"lod\"}\n                            addInputStyle={`input-box-half`}\n                            addClass={`input-box-container-half`}\n                            updateValue={(e) =>{\n                                this.setState({\n                                    lod: ReactDOM.findDOMNode(this.refs.lod.refs.input).value\n                                },() => {\n                                    this.props.setLQD_LODValues(this.state);\n                                })\n                            }}\n                        />\n                    </div>\n                    <div className=\"display-box\">\n                        <InputBox \n                            label={\"LOQ (in ppm)\"}\n                            isRequired={true}\n                            type={\"text\"}\n                            ref={\"loq\"}\n                            addInputStyle={`input-box-half`}\n                            addClass={`input-box-container-half`}\n                            updateValue={(e) => {\n                                this.setState({\n                                    loq: ReactDOM.findDOMNode(this.refs.loq.refs.input).value\n                                }, () => {\n                                    this.props.setLQD_LODValues(this.state);\n                                });\n                            }}\n                        />\n                    </div>\n                   \n                </div>\n                <div className=\"card-content-items\">\n                    <DivButton \n                        ref={\"swab_sampling\"}\n                        text={this.state.divText}\n                        updateValue={(e) =>{\n                             \n                                this.displayCards(SHOW_SWAB_PARAMETER);\n                            }\n                        }\n                    />\n                </div>\n                <div className=\"card-content-displayDetails\">\n                    {this.state.swabDetails}\n                </div>\n                <div className=\"card-content-items\">\n                    <DivButton \n                        ref={\"rinse_sampling\"}\n                        text={this.state.rinseText}\n                        updateValue={(e) =>{\n                            \n                                this.displayCards(SHOW_RINSE_PARAMETER);\n                            }\n                        }\n                    />\n                </div>\n                <div className=\"card-content-displayDetails\">\n                    {this.state.rinseDetails}\n                </div>\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}