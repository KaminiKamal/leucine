{"ast":null,"code":"var _jsxFileName = \"/home/vipl039/Documents/assignments/leucine_tech/src/contents/Cards/Card.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport _ from 'lodash';\nimport './Card.scss';\nimport InputBox from '../InputBox/InputBox';\nimport SelectBox from '../selectBox/SelectBox';\nimport RadioButton from '../radio/radioButton';\nimport MiniRadioButton from '../radio/miniRadioButton';\nimport DivButton from '../DivButton/DivButton';\nimport MiniCards from './MiniCards';\nimport { default as UUID } from \"node-uuid\";\nexport default class Card extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      swapSampling_API: {\n        method_used: \"\",\n        solvent_quantity: \"\",\n        solvent_name: \"\",\n        default_recovery: \"\",\n        MOC: []\n      },\n      recovery: null,\n      moc_display: false,\n      divText: \"Add MOC\",\n      miniCard: [],\n      miniCardsOptions: [{\n        name: \"Stainless Steel\",\n        _id: \"1234567\",\n        key: \"STAINLESS_STEEL\"\n      }, {\n        name: \"Glass\",\n        _id: \"894RBNTNVN\",\n        key: \"GLASS\"\n      }, {\n        name: \"Teflon\",\n        _id: \"1234567UUUUU\",\n        key: \"TEFLON\"\n      }, {\n        name: \"Plastic\",\n        _id: \"874t68743y9g\",\n        key: \"PLASTIC\"\n      }]\n    };\n  } // callback(){\n  // }\n\n\n  targetResidueType() {}\n\n  deleteMiniCards(e) {\n    let prevList = this.state.miniCard;\n    console.log(\"_id\", e);\n\n    _.forEach(prevList, (_element, _index) => {\n      if (_element && _element.key === e) {\n        prevList.splice(_index, 1);\n      }\n    });\n\n    this.setState({\n      miniCard: prevList\n    });\n  }\n\n  populateMiniCards() {\n    let prevList = this.state.miniCard;\n    this.id = UUID.v4();\n    let nodeElement = {\n      key: this.id,\n      value: React.createElement(MiniCards, {\n        key: this.state.miniCard.length,\n        _id: this.id,\n        deleteMiniCards: this.deleteMiniCards.bind(this),\n        callback: this.props.callback.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      })\n    };\n    prevList.push(nodeElement);\n    this.setState({\n      miniCard: prevList\n    });\n  }\n\n  removeMiniCards() {}\n\n  displayMiniCards() {\n    this.setState({\n      divText: \"Add Another MOC\"\n    }, () => {\n      this.populateMiniCards();\n    });\n  }\n\n  getRadioButtonResponse(data) {\n    this.setState({\n      recovery: data === \"Yes\" ? false : true\n    });\n    console.log(this.state);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"card-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, !this.props.bioburdenComponents ? React.createElement(InputBox, {\n      label: \"Method Used\",\n      isRequired: true,\n      type: \"text\",\n      ref: \"method_used\",\n      updateValue: e => {\n        this.setState({\n          swapSampling_API: {\n            method_used: ReactDOM.findDOMNode(this.refs.method_used.refs.input).value\n          }\n        }, () => {\n          this.props.callback({\n            swapSampling_API: {\n              method_used: this.state.swapSampling_API.method_used\n            }\n          });\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }) : null, this.props && this.props.isRequired && !this.props.bioburdenComponents ? React.createElement(\"div\", {\n      style: {\n        display: \"flex\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, _.map(this.props.isRequired, (el, i) => {\n      if (el === \"SOLVENT_NAME\") {\n        return React.createElement(\"div\", {\n          key: \"solvent\" + i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        }, React.createElement(InputBox, {\n          label: \"Solvent name\",\n          isRequired: true,\n          type: \"text\",\n          ref: \"solvent_name\",\n          addInputStyle: \"input-box-half\",\n          addClass: \"input-box-container-half\",\n          updateValue: e => {\n            this.setState({\n              swapSampling_API: {\n                solvent_name: ReactDOM.findDOMNode(this.refs.solvent_name.refs.input).value\n              }\n            }, () => {\n              this.props.callback({\n                swapSampling_API: {\n                  solvent_name: this.state.swapSampling_API.solvent_name\n                }\n              });\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        }));\n      }\n\n      if (el === \"SOLVENT_QUANTITY\") {\n        return React.createElement(\"div\", {\n          key: \"solvent_qua\" + i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159\n          },\n          __self: this\n        }, React.createElement(InputBox, {\n          label: \"Solvent Quantity\",\n          isRequired: true,\n          type: \"text\",\n          ref: \"solvent_quantity\",\n          addInputStyle: \"input-box-half\",\n          addClass: \"input-box-container-half\",\n          updateValue: e => {\n            this.setState({\n              swapSampling_API: {\n                solvent_quantity: ReactDOM.findDOMNode(this.refs.solvent_quantity.refs.input).value\n              }\n            }, () => {\n              this.props.callback(this.state);\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160\n          },\n          __self: this\n        }));\n      }\n    })) : null, this.props.bioburdenComponents ? React.createElement(\"div\", {\n      style: {\n        display: 'flex'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }), _.map([0, 1], (el, i) => React.createElement(MiniRadioButton, {\n      key: i + \"leuc\",\n      label: i == 0 ? \"Yes\" : \"No\",\n      isRequired: false,\n      type: \"radio\",\n      ref: i == 0 ? \"recv_y\" : \"recv_n\",\n      name: \"mini_recovery\",\n      addInputStyle: \"input-box-half\",\n      addClass: \"input-box-container-half\",\n      updateValue: this.getRadioButtonResponse.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }))) : null, React.createElement(InputBox, {\n      label: \"Default Recovery\",\n      isRequired: true,\n      type: \"text\",\n      ref: \"default_recovery\",\n      updateValue: e => {\n        this.setState({\n          swapSampling_API: {\n            default_recovery: ReactDOM.findDOMNode(this.refs.default_recovery.refs.input).value\n          }\n        }, () => {\n          this.props.callback(this.state);\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        backgroundColor: '#EFEFEF',\n        padding: '1.5em 0.5em 1.5em 0.5em'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, _.map(this.state.miniCard, (_elem, _ind) => _elem.value), React.createElement(DivButton, {\n      ref: \"add_moc\",\n      text: this.state.divText,\n      addClass: 'miniCardButton',\n      updateValue: e => {\n        this.setState({\n          moc_display: !this.state.moc_display\n        }, () => {\n          this.displayMiniCards();\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    })))));\n  }\n\n}","map":{"version":3,"sources":["/home/vipl039/Documents/assignments/leucine_tech/src/contents/Cards/Card.js"],"names":["React","Component","ReactDOM","_","InputBox","SelectBox","RadioButton","MiniRadioButton","DivButton","MiniCards","default","UUID","Card","constructor","props","state","swapSampling_API","method_used","solvent_quantity","solvent_name","default_recovery","MOC","recovery","moc_display","divText","miniCard","miniCardsOptions","name","_id","key","targetResidueType","deleteMiniCards","e","prevList","console","log","forEach","_element","_index","splice","setState","populateMiniCards","id","v4","nodeElement","value","length","bind","callback","push","removeMiniCards","displayMiniCards","getRadioButtonResponse","data","render","bioburdenComponents","findDOMNode","refs","input","isRequired","display","map","el","i","backgroundColor","padding","_elem","_ind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport _ from 'lodash';\nimport './Card.scss';\nimport InputBox from '../InputBox/InputBox';\nimport SelectBox from '../selectBox/SelectBox';\nimport RadioButton from '../radio/radioButton'; \nimport MiniRadioButton from '../radio/miniRadioButton';\nimport DivButton from '../DivButton/DivButton';\nimport MiniCards from './MiniCards';\nimport {default as UUID} from \"node-uuid\";\n\nexport default class Card extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            swapSampling_API: {\n                method_used: \"\",\n                solvent_quantity: \"\",\n                solvent_name: \"\",\n                default_recovery: \"\",\n                MOC: []\n            },\n            recovery: null,\n            moc_display: false,\n            divText: `Add MOC`,\n            miniCard: [],\n            miniCardsOptions: [\n                {\n                    name: \"Stainless Steel\",\n                    _id: \"1234567\",\n                    key: \"STAINLESS_STEEL\"\n                },\n                {\n                    name: \"Glass\",\n                    _id: \"894RBNTNVN\",\n                    key: \"GLASS\"\n                },\n                {\n                    name: \"Teflon\",\n                    _id: \"1234567UUUUU\",\n                    key: \"TEFLON\"\n                },\n                {\n                    name: \"Plastic\",\n                    _id: \"874t68743y9g\",\n                    key: \"PLASTIC\"\n                }\n            ]\n        }\n    }\n    // callback(){\n\n    // }\n\n    targetResidueType(){\n\n    }\n    deleteMiniCards(e){\n        let prevList = this.state.miniCard;\n        console.log(\"_id\", e);\n        \n        _.forEach(prevList, (_element, _index) => {\n            if(_element && _element.key===e){\n                prevList.splice(_index, 1)\n            }\n        });\n        this.setState({miniCard: prevList});\n    }\n    \n    populateMiniCards(){\n        let prevList = this.state.miniCard;\n        this.id = UUID.v4();\n        let nodeElement = {\n            key: this.id,\n            value: (<MiniCards key={this.state.miniCard.length} _id={this.id} deleteMiniCards={this.deleteMiniCards.bind(this)} callback={this.props.callback.bind(this)} />)\n        };\n        prevList.push(nodeElement);\n        this.setState({miniCard: prevList})\n    }\n    removeMiniCards(){\n\n    }\n    displayMiniCards(){\n        this.setState({ divText: `Add Another MOC`}, () => {\n            this.populateMiniCards();\n        });\n    }\n    getRadioButtonResponse(data){\n        this.setState({recovery: (data===\"Yes\" ? false : true)});\n        console.log(this.state)\n    }\n    render() {\n        \n        return (\n            <div className=\"card-container\">\n                <div className=\"card-content\">\n                    {\n                        (!this.props.bioburdenComponents\n                            ?\n                        <InputBox \n                            label={\"Method Used\"}\n                            isRequired={true}\n                            type={\"text\"}\n                            ref={\"method_used\"}\n                            updateValue={(e) =>{\n                                this.setState({\n                                    swapSampling_API: {\n                                        method_used: ReactDOM.findDOMNode(this.refs.method_used.refs.input).value\n                                    }\n                                },() => {\n                                    this.props.callback({\n                                        swapSampling_API: {\n                                        method_used: this.state.swapSampling_API.method_used\n                                    }});\n                                })\n                            }}\n                        />  \n                        :\n                        null  \n                        )\n                    }\n                    \n                    {\n                        (this.props && this.props.isRequired && !this.props.bioburdenComponents\n                            ?\n                            <div style={{display: \"flex\"}}>\n                               \n                                {\n                                    _.map(this.props.isRequired, (el,i) => {\n                                        if(el===\"SOLVENT_NAME\"){\n                                            return (\n                                            <div key={`solvent`+i}>\n                                                <InputBox \n                                                    label={\"Solvent name\"}\n                                                    isRequired={true}\n                                                    type={\"text\"}\n                                                    ref={\"solvent_name\"}\n                                                    addInputStyle={`input-box-half`}\n                                                    addClass={`input-box-container-half`}\n                                                    updateValue={(e) =>{\n                                                        this.setState({\n                                                            swapSampling_API:{\n                                                                solvent_name: ReactDOM.findDOMNode(this.refs.solvent_name.refs.input).value\n                                                            } \n                                                        },() => {\n                                                            this.props.callback({swapSampling_API:{\n                                                                solvent_name: this.state.swapSampling_API.solvent_name\n                                                            }} );\n                                                        })\n                                                    }}\n                                                />\n                                            </div>\n                                        \n                                            )\n                                        }\n                                        if(el===\"SOLVENT_QUANTITY\"){\n                                            return (\n                                                <div key={`solvent_qua`+i}>\n                                                    <InputBox \n                                                        label={\"Solvent Quantity\"}\n                                                        isRequired={true}\n                                                        type={\"text\"}\n                                                        ref={\"solvent_quantity\"}\n                                                        addInputStyle={`input-box-half`}\n                                                        addClass={`input-box-container-half`}\n                                                        updateValue={(e) =>{\n                                                            this.setState({\n                                                                swapSampling_API:{\n                                                                    solvent_quantity: ReactDOM.findDOMNode(this.refs.solvent_quantity.refs.input).value\n                                                                }\n                                                            },() => {\n                                                                this.props.callback(this.state);\n                                                            })\n                                                        }}\n                                                    />\n                                                </div>\n                                        \n                                            )\n                                        }\n                                    })\n                                }\n                            </div>\n                            :\n                            null\n                        )\n                    }\n                    \n                    {\n                        (this.props.bioburdenComponents\n                            ?\n                            <div style={{display: 'flex'}}>\n                                <label></label>\n                                {_.map([0,1], (el, i) => (\n                                    <MiniRadioButton \n                                        key={i+\"leuc\"}\n                                        label={(i==0 ? \"Yes\" : \"No\")}\n                                        isRequired={false}\n                                        type={\"radio\"}\n                                        ref={(i==0) ? \"recv_y\" : \"recv_n\"}\n                                        name={\"mini_recovery\"}\n                                        addInputStyle={`input-box-half`}\n                                        addClass={`input-box-container-half`}\n                                        updateValue={this.getRadioButtonResponse.bind(this)}\n                                    />\n                                ))}\n                            </div>\n                            \n                            :\n                            null\n                        )\n                    }\n                    \n                    <InputBox \n                        label={\"Default Recovery\"}\n                        isRequired={true}\n                        type={\"text\"}\n                        ref={\"default_recovery\"}\n                        updateValue={(e) =>{\n                            this.setState({\n                                swapSampling_API:{\n                                    default_recovery: ReactDOM.findDOMNode(this.refs.default_recovery.refs.input).value\n                                } \n                            },() => {\n                                this.props.callback(this.state);\n                            })\n                        }}\n                    />\n                    <div>\n                        <div style={{backgroundColor: '#EFEFEF', padding: '1.5em 0.5em 1.5em 0.5em'}}>\n                            {_.map(this.state.miniCard,  (_elem, _ind) => (_elem.value))}\n                        \n                        <DivButton \n                            ref={\"add_moc\"}\n                            text={this.state.divText}\n                            addClass={'miniCardButton'}\n                            updateValue={(e) =>{\n                                this.setState({\n                                    moc_display: !this.state.moc_display,\n                                    \n                                },() => {\n                                    this.displayMiniCards();\n                                })\n                            }}\n                        />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}