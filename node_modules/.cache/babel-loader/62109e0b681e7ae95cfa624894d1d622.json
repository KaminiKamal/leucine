{"ast":null,"code":"var _jsxFileName = \"/home/vipl039/Documents/assignments/leucine_tech/src/contents/Cards/Card.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './Card.scss';\nimport InputBox from '../InputBox/InputBox';\nimport SelectBox from '../selectBox/SelectBox';\nimport DivButton from '../DivButton/DivButton';\nexport default class Card extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      swapSampling_API: {\n        method_used: \"\",\n        solvent_quantity: \"\",\n        solvent_name: \"\",\n        default_recovery: \"\"\n      },\n      moc_display: false,\n      divText: \"Add MOC\",\n      miniCard: [],\n      miniCardsOptions: [{\n        name: \"Stainless Steel\",\n        _id: \"1234567\",\n        key: \"STAINLESS_STEEL\"\n      }, {\n        name: \"Glass\",\n        _id: \"894RBNTNVN\",\n        key: \"GLASS\"\n      }, {\n        name: \"Teflon\",\n        _id: \"1234567UUUUU\",\n        key: \"TEFLON\"\n      }, {\n        name: \"Plastic\",\n        _id: \"874t68743y9g\",\n        key: \"PLASTIC\"\n      }]\n    };\n  } // callback(){\n  // }\n\n\n  targetResidueType() {}\n\n  populateMiniCards() {\n    let miniCards = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(SelectBox, {\n      label: \"Select MOC\",\n      isRequired: true,\n      type: \"select\",\n      ref: \"select_moc\",\n      addInputStyle: \"input-box-half\",\n      addClass: \"input-box-container-half\",\n      options: this.state.miniCardsOptions,\n      updateValue: this.targetResidueType.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), React.createElement(InputBox, {\n      label: \"Recovery (%)\",\n      isRequired: true,\n      type: \"text\",\n      ref: \"recovery_percent\",\n      addInputStyle: \"input-box-half\",\n      addClass: \"input-box-container-half\",\n      updateValue: e => {\n        this.setState({\n          lod: ReactDOM.findDOMNode(this.refs.recovery_percent.refs.input).value\n        }, () => {\n          this.props.callback(this.state);\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }));\n    let cards = this.state.miniCard;\n    cards.push(miniCards);\n    this.setState({\n      miniCard: cards\n    });\n  }\n\n  removeMiniCards() {}\n\n  displayMiniCards() {\n    if (this.state.moc_display) {\n      this.setState({\n        divText: \"Remove MOC\"\n      }, () => {\n        this.populateMiniCards();\n      });\n    } else {\n      this.setState({\n        divText: \"Remove MOC\"\n      }, () => {\n        this.removeMiniCards();\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"card-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(InputBox, {\n      label: \"Method Used\",\n      isRequired: true,\n      type: \"text\",\n      ref: \"method_used\",\n      updateValue: e => {\n        this.setState({\n          swapSampling_API: {\n            method_used: ReactDOM.findDOMNode(this.refs.method_used.refs.input).value\n          }\n        }, () => {\n          this.props.callback(this.state);\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(InputBox, {\n      label: \"Solvent name\",\n      isRequired: true,\n      type: \"text\",\n      ref: \"solvent_name\",\n      addInputStyle: \"input-box-half\",\n      addClass: \"input-box-container-half\",\n      updateValue: e => {\n        this.setState({\n          swapSampling_API: {\n            solvent_name: ReactDOM.findDOMNode(this.refs.solvent_name.refs.input).value\n          }\n        }, () => {\n          this.props.callback(this.state);\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(InputBox, {\n      label: \"Solvent Quantity\",\n      isRequired: true,\n      type: \"text\",\n      ref: \"solvent_quantity\",\n      addInputStyle: \"input-box-half\",\n      addClass: \"input-box-container-half\",\n      updateValue: e => {\n        this.setState({\n          swapSampling_API: {\n            solvent_quantity: ReactDOM.findDOMNode(this.refs.solvent_quantity.refs.input).value\n          }\n        }, () => {\n          this.props.callback(this.state);\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }))), React.createElement(InputBox, {\n      label: \"Default Recovery\",\n      isRequired: true,\n      type: \"text\",\n      ref: \"default_recovery\",\n      updateValue: e => {\n        this.setState({\n          swapSampling_API: {\n            default_recovery: ReactDOM.findDOMNode(this.refs.default_recovery.refs.input).value\n          }\n        }, () => {\n          this.props.callback(this.state);\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(DivButton, {\n      ref: \"add_moc\",\n      text: this.state.divText,\n      updateValue: e => {\n        this.setState({\n          moc_display: !this.state.moc_display\n        }, () => {\n          this.displayMiniCards();\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }))));\n  }\n\n}","map":{"version":3,"sources":["/home/vipl039/Documents/assignments/leucine_tech/src/contents/Cards/Card.js"],"names":["React","Component","ReactDOM","InputBox","SelectBox","DivButton","Card","constructor","props","state","swapSampling_API","method_used","solvent_quantity","solvent_name","default_recovery","moc_display","divText","miniCard","miniCardsOptions","name","_id","key","targetResidueType","populateMiniCards","miniCards","bind","e","setState","lod","findDOMNode","refs","recovery_percent","input","value","callback","cards","push","removeMiniCards","displayMiniCards","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './Card.scss';\nimport InputBox from '../InputBox/InputBox';\nimport SelectBox from '../selectBox/SelectBox';\nimport DivButton from '../DivButton/DivButton';\n\nexport default class Card extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            swapSampling_API: {\n                method_used: \"\",\n                solvent_quantity: \"\",\n                solvent_name: \"\",\n                default_recovery: \"\"\n            },\n            moc_display: false,\n            divText: `Add MOC`,\n            miniCard: [],\n            miniCardsOptions: [\n                {\n                    name: \"Stainless Steel\",\n                    _id: \"1234567\",\n                    key: \"STAINLESS_STEEL\"\n                },\n                {\n                    name: \"Glass\",\n                    _id: \"894RBNTNVN\",\n                    key: \"GLASS\"\n                },\n                {\n                    name: \"Teflon\",\n                    _id: \"1234567UUUUU\",\n                    key: \"TEFLON\"\n                },\n                {\n                    name: \"Plastic\",\n                    _id: \"874t68743y9g\",\n                    key: \"PLASTIC\"\n                }\n            ]\n        }\n    }\n    // callback(){\n\n    // }\n    targetResidueType(){\n\n    }\n    populateMiniCards(){\n        let miniCards = (\n            <div>\n                \n                <SelectBox \n                    label={`Select MOC`}\n                    isRequired={true}\n                    type={\"select\"}\n                    ref={\"select_moc\"}\n                    addInputStyle={`input-box-half`}\n                    addClass={`input-box-container-half`}\n                    options={this.state.miniCardsOptions}\n                    updateValue={this.targetResidueType.bind(this)}\n                />\n                <InputBox \n                    label={`Recovery (%)`}\n                    isRequired={true}\n                    type={\"text\"}\n                    ref={\"recovery_percent\"}\n                    addInputStyle={`input-box-half`}\n                    addClass={`input-box-container-half`}\n                    updateValue={(e) =>{\n                        this.setState({\n                            lod: ReactDOM.findDOMNode(this.refs.recovery_percent.refs.input).value\n                        },() => {\n                            this.props.callback(this.state);\n                        })\n                    }}\n                />\n            </div>\n        )\n        let cards = this.state.miniCard;\n        cards.push(miniCards);\n        this.setState({miniCard: cards})\n    }\n    removeMiniCards(){\n\n    }\n    displayMiniCards(){\n        if(this.state.moc_display){\n            this.setState({ divText: `Remove MOC`}, () => {\n                this.populateMiniCards();\n            })\n        }\n        else{\n            this.setState({ divText: `Remove MOC`}, () => {\n                this.removeMiniCards();\n            })\n        }\n    }\n    render() {\n        return (\n            <div className=\"card-container\">\n                <div className=\"card-content\">\n                    <InputBox \n                        label={\"Method Used\"}\n                        isRequired={true}\n                        type={\"text\"}\n                        ref={\"method_used\"}\n                        updateValue={(e) =>{\n                            this.setState({\n                                swapSampling_API: {\n                                    method_used: ReactDOM.findDOMNode(this.refs.method_used.refs.input).value\n                                }\n                            },() => {\n                                this.props.callback(this.state);\n                            })\n                        }}\n                    />\n                    <div>\n                        <div>\n                            <InputBox \n                                label={\"Solvent name\"}\n                                isRequired={true}\n                                type={\"text\"}\n                                ref={\"solvent_name\"}\n                                addInputStyle={`input-box-half`}\n                                addClass={`input-box-container-half`}\n                                updateValue={(e) =>{\n                                    this.setState({\n                                        swapSampling_API:{\n                                            solvent_name: ReactDOM.findDOMNode(this.refs.solvent_name.refs.input).value\n                                        } \n                                    },() => {\n                                        this.props.callback(this.state);\n                                    })\n                                }}\n                            />\n                        </div>\n                        <div>\n                            <InputBox \n                                label={\"Solvent Quantity\"}\n                                isRequired={true}\n                                type={\"text\"}\n                                ref={\"solvent_quantity\"}\n                                addInputStyle={`input-box-half`}\n                                addClass={`input-box-container-half`}\n                                updateValue={(e) =>{\n                                    this.setState({\n                                        swapSampling_API:{\n                                            solvent_quantity: ReactDOM.findDOMNode(this.refs.solvent_quantity.refs.input).value\n                                        }\n                                    },() => {\n                                        this.props.callback(this.state);\n                                    })\n                                }}\n                            />\n                        </div>\n                    </div>\n                \n                    <InputBox \n                        label={\"Default Recovery\"}\n                        isRequired={true}\n                        type={\"text\"}\n                        ref={\"default_recovery\"}\n                        updateValue={(e) =>{\n                            this.setState({\n                                swapSampling_API:{\n                                    default_recovery: ReactDOM.findDOMNode(this.refs.default_recovery.refs.input).value\n                                } \n                            },() => {\n                                this.props.callback(this.state);\n                            })\n                        }}\n                    />\n                    <div>\n                        <DivButton \n                            ref={\"add_moc\"}\n                            text={this.state.divText}\n                            updateValue={(e) =>{\n                                this.setState({\n                                    moc_display: !this.state.moc_display,\n                                    \n                                },() => {\n                                    this.displayMiniCards();\n                                })\n                            }}\n                        />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}