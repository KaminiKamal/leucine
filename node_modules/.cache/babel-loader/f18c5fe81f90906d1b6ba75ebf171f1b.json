{"ast":null,"code":"var _jsxFileName = \"/home/vipl039/Documents/assignments/leucine_tech/src/contents/CardContents.js\";\nimport React, { Component } from 'react';\nexport default class CardContents extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      target_residue_type_list: []\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"card-contents\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, React.createElement(InputBox, {\n      label: \"Analytical Method ID\",\n      isRequired: true,\n      type: \"text\",\n      ref: \"analytical_method_ID\",\n      updateValue: e => {\n        this.setState({\n          analytical_method_ID: ReactDOM.findDOMNode(this.refs.analytical_method_ID.refs.input).value\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, React.createElement(InputBox, {\n      label: \"Analytical Method ID\",\n      isRequired: true,\n      type: \"text\",\n      ref: \"analytical_method_ID\",\n      updateValue: e => {\n        this.setState({\n          analytical_method_ID: ReactDOM.findDOMNode(this.refs.analytical_method_ID.refs.input).value\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }))));\n  }\n\n}","map":{"version":3,"sources":["/home/vipl039/Documents/assignments/leucine_tech/src/contents/CardContents.js"],"names":["React","Component","CardContents","constructor","props","state","target_residue_type_list","render","e","setState","analytical_method_ID","ReactDOM","findDOMNode","refs","input","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,eAAe,MAAMC,YAAN,SAA2BD,SAA3B,CAAqC;AAChDE,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,wBAAwB,EAAE;AADjB,KAAb;AAGH;;AACDC,EAAAA,MAAM,GAAG;AACL,WACI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,QAAD;AACI,MAAA,KAAK,EAAE,sBADX;AAEI,MAAA,UAAU,EAAE,IAFhB;AAGI,MAAA,IAAI,EAAE,MAHV;AAII,MAAA,GAAG,EAAE,sBAJT;AAKI,MAAA,WAAW,EAAGC,CAAD,IAAO;AAAC,aAAKC,QAAL,CAAc;AAACC,UAAAA,oBAAoB,EAAEC,QAAQ,CAACC,WAAT,CAAqB,KAAKC,IAAL,CAAUH,oBAAV,CAA+BG,IAA/B,CAAoCC,KAAzD,EAAgEC;AAAvF,SAAd;AAA6G,OALtI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,EAUI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,QAAD;AACI,MAAA,KAAK,EAAE,sBADX;AAEI,MAAA,UAAU,EAAE,IAFhB;AAGI,MAAA,IAAI,EAAE,MAHV;AAII,MAAA,GAAG,EAAE,sBAJT;AAKI,MAAA,WAAW,EAAGP,CAAD,IAAO;AAAC,aAAKC,QAAL,CAAc;AAACC,UAAAA,oBAAoB,EAAEC,QAAQ,CAACC,WAAT,CAAqB,KAAKC,IAAL,CAAUH,oBAAV,CAA+BG,IAA/B,CAAoCC,KAAzD,EAAgEC;AAAvF,SAAd;AAA6G,OALtI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAVJ,CADJ,CADJ;AAwBH;;AAhC+C","sourcesContent":["import React, { Component } from 'react'\n\nexport default class CardContents extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            target_residue_type_list: []\n        }\n    }\n    render() {\n        return (\n            <div className=\"card-contents\">\n                <div>\n                    <div>\n                        <InputBox \n                            label={\"Analytical Method ID\"}\n                            isRequired={true}\n                            type={\"text\"}\n                            ref={\"analytical_method_ID\"}\n                            updateValue={(e) => {this.setState({analytical_method_ID: ReactDOM.findDOMNode(this.refs.analytical_method_ID.refs.input).value})}}\n                        />\n                    </div>\n                    <div>\n                        <InputBox \n                            label={\"Analytical Method ID\"}\n                            isRequired={true}\n                            type={\"text\"}\n                            ref={\"analytical_method_ID\"}\n                            updateValue={(e) => {this.setState({analytical_method_ID: ReactDOM.findDOMNode(this.refs.analytical_method_ID.refs.input).value})}}\n                        />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}