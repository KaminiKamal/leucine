{"ast":null,"code":"var _jsxFileName = \"/home/vipl039/Documents/assignments/leucine_tech/src/contents/CardContents.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport InputBox from '../contents/InputBox/InputBox';\nimport DivButton from '../contents/DivButton/DivButton';\nimport Card from '../contents/Cards/Card';\nimport { SHOW_RINSE_PARAMETER, HIDE_RINSE_PARAMETER, SHOW_SWAB_PARAMETER, HIDE_SWAB_PARAMETER } from '../constants/config';\nexport default class CardContents extends Component {\n  constructor(props) {\n    super(props);\n\n    this.hideCards = cardType => {\n      switch (cardType) {\n        case HIDE_SWAB_PARAMETER:\n          return;\n\n        case HIDE_RINSE_PARAMETER:\n          return;\n      }\n    };\n\n    this.displayCards = e => {\n      // if(this.state.swabDisplay){\n      //     this.setState({divText: `Remove swab sampling parameters`}, () => {\n      //         this.mountElements();\n      //     })\n      // }\n      // else{\n      //     this.setState({divText: `Configure swab sampling parameter`}, () => {\n      //         this.unmountElements();\n      //     })\n      // }\n      switch (e) {\n        case SHOW_SWAB_PARAMETER:\n          if (!this.state.swabDisplay) {\n            this.setState({\n              divText: \"Remove swab sampling parameters\"\n            }, () => {\n              let nodeElement = React.createElement(\"div\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 45\n                },\n                __self: this\n              }, React.createElement(Card, {\n                callback: this.callback.bind(this),\n                isRequired: [\"SOLVENT_NAME\", \"SOLVENT_QUANTITY\"],\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 46\n                },\n                __self: this\n              }));\n              this.mountElements({\n                swabDetails: nodeElement\n              });\n            });\n          } else {\n            hideCards(HIDE_SWAB_PARAMETER);\n          }\n\n          return;\n\n        case SHOW_RINSE_PARAMETER:\n          this.setState({\n            rinseText: \"Remove rinse sampling parameters\"\n          }, () => {\n            let nodeElement = React.createElement(\"div\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 62\n              },\n              __self: this\n            }, React.createElement(Card, {\n              callback: this.callback.bind(this),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 63\n              },\n              __self: this\n            }));\n            this.mountElements({\n              rinseDetails: nodeElement\n            });\n          });\n          return;\n      }\n    };\n\n    this.state = {\n      target_residue_type_list: [],\n      lod: \"\",\n      loq: \"\",\n      swabDisplay: false,\n      divText: \"Configure swab sampling parameter\",\n      rinseText: \"Configure rinse sampling parameter\",\n      swabDetails: null,\n      rinseDetails: null\n    };\n  }\n\n  callback() {\n    this.props.setLQD_LODValues(this.state);\n  }\n\n  mountElements(cardDetails) {\n    this.setState(cardDetails);\n  }\n\n  unmountElements() {}\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"card-contents\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card-content-items\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"display-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(InputBox, {\n      label: \"LOD (in ppm)\",\n      isRequired: true,\n      type: \"text\",\n      ref: \"lod\",\n      addInputStyle: \"input-box-half\",\n      addClass: \"input-box-container-half\",\n      updateValue: e => {\n        this.setState({\n          lod: ReactDOM.findDOMNode(this.refs.lod.refs.input).value\n        }, () => {\n          this.props.setLQD_LODValues(this.state);\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"display-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(InputBox, {\n      label: \"LOQ (in ppm)\",\n      isRequired: true,\n      type: \"text\",\n      ref: \"loq\",\n      addInputStyle: \"input-box-half\",\n      addClass: \"input-box-container-half\",\n      updateValue: e => {\n        this.setState({\n          loq: ReactDOM.findDOMNode(this.refs.loq.refs.input).value\n        }, () => {\n          this.props.setLQD_LODValues(this.state);\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"card-content-items\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(DivButton, {\n      ref: \"swab_sampling\",\n      text: this.state.divText,\n      updateValue: e => {\n        this.setState({\n          swabDisplay: !this.state.swabDisplay\n        }, () => {\n          this.displayCards(SHOW_SWAB_PARAMETER);\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"card-content-displayDetails\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, this.state.swabDetails), React.createElement(\"div\", {\n      className: \"card-content-items\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(DivButton, {\n      ref: \"rinse_sampling\",\n      text: this.state.rinseText,\n      updateValue: e => {\n        this.setState({\n          rinseDisplay: !this.state.rinseDisplay\n        }, () => {\n          this.displayCards(SHOW_RINSE_PARAMETER);\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"card-content-displayDetails\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, this.state.rinseDetails));\n  }\n\n}","map":{"version":3,"sources":["/home/vipl039/Documents/assignments/leucine_tech/src/contents/CardContents.js"],"names":["React","Component","ReactDOM","InputBox","DivButton","Card","SHOW_RINSE_PARAMETER","HIDE_RINSE_PARAMETER","SHOW_SWAB_PARAMETER","HIDE_SWAB_PARAMETER","CardContents","constructor","props","hideCards","cardType","displayCards","e","state","swabDisplay","setState","divText","nodeElement","callback","bind","mountElements","swabDetails","rinseText","rinseDetails","target_residue_type_list","lod","loq","setLQD_LODValues","cardDetails","unmountElements","render","findDOMNode","refs","input","value","rinseDisplay"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport ReactDOM from 'react-dom';\nimport InputBox from '../contents/InputBox/InputBox';\nimport DivButton from '../contents/DivButton/DivButton';\nimport Card from '../contents/Cards/Card';\nimport {SHOW_RINSE_PARAMETER, HIDE_RINSE_PARAMETER, SHOW_SWAB_PARAMETER, HIDE_SWAB_PARAMETER} from '../constants/config'\nexport default class CardContents extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            target_residue_type_list: [],\n            lod: \"\",\n            loq: \"\",\n            swabDisplay: false,\n            divText: `Configure swab sampling parameter`,\n            rinseText: `Configure rinse sampling parameter`,\n            swabDetails: null,\n            rinseDetails: null\n        }\n    }\n    hideCards = (cardType) => {\n        switch(cardType){\n            case HIDE_SWAB_PARAMETER:\n                return;\n            \n            case HIDE_RINSE_PARAMETER:\n                return;\n        }\n    }\n    displayCards = (e) => {\n        // if(this.state.swabDisplay){\n        //     this.setState({divText: `Remove swab sampling parameters`}, () => {\n        //         this.mountElements();\n        //     })\n        // }\n        // else{\n        //     this.setState({divText: `Configure swab sampling parameter`}, () => {\n        //         this.unmountElements();\n        //     })\n        // }\n        switch(e){\n            case SHOW_SWAB_PARAMETER:\n                if(!this.state.swabDisplay){\n                    this.setState({divText: `Remove swab sampling parameters`}, () => {\n                        let nodeElement = (<div>\n                            <Card \n                                callback={this.callback.bind(this)} \n                                isRequired={[\"SOLVENT_NAME\", \"SOLVENT_QUANTITY\"]}\n                            />\n                        </div>);\n                        this.mountElements({swabDetails: nodeElement});\n                    })\n                }\n                else{\n                    hideCards(HIDE_SWAB_PARAMETER);\n                }\n                \n                return;\n\n            case SHOW_RINSE_PARAMETER:\n                this.setState({rinseText: `Remove rinse sampling parameters`}, () => {\n                    let nodeElement = (<div>\n                        <Card \n                            callback={this.callback.bind(this)} \n                            \n                        />\n                    </div>);\n                    this.mountElements({rinseDetails: nodeElement});\n                })\n                return;\n        }\n    }\n\n    callback(){\n        this.props.setLQD_LODValues(this.state);\n    }\n    mountElements(cardDetails){\n        this.setState(cardDetails);\n    }\n\n    unmountElements(){\n\n    }\n\n    render() {\n        return (\n            <div className=\"card-contents\">\n                <div className=\"card-content-items\">\n                    <div className=\"display-box\">\n                        <InputBox \n                            label={\"LOD (in ppm)\"}\n                            isRequired={true}\n                            type={\"text\"}\n                            ref={\"lod\"}\n                            addInputStyle={`input-box-half`}\n                            addClass={`input-box-container-half`}\n                            updateValue={(e) =>{\n                                this.setState({\n                                    lod: ReactDOM.findDOMNode(this.refs.lod.refs.input).value\n                                },() => {\n                                    this.props.setLQD_LODValues(this.state);\n                                })\n                            }}\n                        />\n                    </div>\n                    <div className=\"display-box\">\n                        <InputBox \n                            label={\"LOQ (in ppm)\"}\n                            isRequired={true}\n                            type={\"text\"}\n                            ref={\"loq\"}\n                            addInputStyle={`input-box-half`}\n                            addClass={`input-box-container-half`}\n                            updateValue={(e) => {\n                                this.setState({\n                                    loq: ReactDOM.findDOMNode(this.refs.loq.refs.input).value\n                                }, () => {\n                                    this.props.setLQD_LODValues(this.state);\n                                });\n                            }}\n                        />\n                    </div>\n                   \n                </div>\n                <div className=\"card-content-items\">\n                    <DivButton \n                        ref={\"swab_sampling\"}\n                        text={this.state.divText}\n                        updateValue={(e) =>{\n                            this.setState({\n                                swabDisplay: !this.state.swabDisplay,\n                                \n                            },() => {\n                                this.displayCards(SHOW_SWAB_PARAMETER);\n                            })\n                        }}\n                    />\n                </div>\n                <div className=\"card-content-displayDetails\">\n                    {this.state.swabDetails}\n                </div>\n                <div className=\"card-content-items\">\n                    <DivButton \n                        ref={\"rinse_sampling\"}\n                        text={this.state.rinseText}\n                        updateValue={(e) =>{\n                            this.setState({\n                                rinseDisplay: !this.state.rinseDisplay,\n                                \n                            },() => {\n                                this.displayCards(SHOW_RINSE_PARAMETER);\n                            })\n                        }}\n                    />\n                </div>\n                <div className=\"card-content-displayDetails\">\n                    {this.state.rinseDetails}\n                </div>\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}