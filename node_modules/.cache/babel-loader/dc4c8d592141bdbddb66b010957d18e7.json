{"ast":null,"code":"var _jsxFileName = \"/home/vipl039/Documents/assignments/leucine_tech/src/contents/CardContents.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport InputBox from '../contents/InputBox/InputBox';\nimport RadioButton from '../contents/radio/radioButton';\nimport DivButton from '../contents/DivButton/DivButton';\nimport Card from '../contents/Cards/Card';\nimport _ from 'lodash';\nimport { SHOW_RINSE_PARAMETER, HIDE_RINSE_PARAMETER, SHOW_SWAB_PARAMETER, HIDE_SWAB_PARAMETER } from '../constants/config';\nexport default class CardContents extends Component {\n  constructor(props) {\n    super(props);\n\n    this.hideCards = cardType => {\n      switch (cardType) {\n        case HIDE_SWAB_PARAMETER:\n          this.setState({\n            swabDetails: null,\n            divText: \"Configure swab sampling parameter\",\n            swabDisplay: false\n          });\n          return;\n\n        case HIDE_RINSE_PARAMETER:\n          this.setState({\n            rinseDetails: null,\n            rinseText: \"Configure rinse sampling parameter\",\n            rinseDisplay: false\n          });\n          return;\n      }\n    };\n\n    this.displayCards = e => {\n      switch (e) {\n        case SHOW_SWAB_PARAMETER:\n          if (!this.state.swabDisplay) {\n            this.setState({\n              divText: \"Remove swab sampling parameters\",\n              swabDisplay: true\n            }, () => {\n              let nodeElement = React.createElement(\"div\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 44\n                },\n                __self: this\n              }, React.createElement(Card, {\n                callback: this.callback.bind(this),\n                bioburdenComponents: this.props.bioburdenComponents,\n                isRequired: [\"SOLVENT_NAME\", \"SOLVENT_QUANTITY\"],\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 45\n                },\n                __self: this\n              }));\n              this.mountElements({\n                swabDetails: nodeElement\n              });\n            });\n          } else {\n            this.hideCards(HIDE_SWAB_PARAMETER);\n          }\n\n          return;\n\n        case SHOW_RINSE_PARAMETER:\n          if (!this.state.rinseDisplay) {\n            this.setState({\n              rinseText: \"Remove rinse sampling parameters\",\n              rinseDisplay: true\n            }, () => {\n              let nodeElement = React.createElement(\"div\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 63\n                },\n                __self: this\n              }, React.createElement(Card, {\n                callback: this.callback.bind(this),\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 64\n                },\n                __self: this\n              }));\n              this.mountElements({\n                rinseDetails: nodeElement\n              });\n            });\n          } else {\n            this.hideCards(HIDE_RINSE_PARAMETER);\n          }\n\n          return;\n      }\n    };\n\n    this.state = {\n      target_residue_type_list: [],\n      lod: \"\",\n      loq: \"\",\n      lntc: \"\",\n      swabDisplay: false,\n      rinseDisplay: false,\n      divText: \"Configure swab sampling parameter\",\n      rinseText: \"Configure rinse sampling parameter\",\n      swabDetails: null,\n      rinseDetails: null\n    };\n  }\n\n  callback() {\n    this.props.setLQD_LODValues(this.state);\n  }\n\n  mountElements(cardDetails) {\n    this.setState(cardDetails);\n  }\n\n  getRadioButtonResponse(lntc) {\n    switch (lntc) {\n      case \"Yes\":\n        this.setState({\n          lntc: true\n        });\n        return;\n\n      case \"No\":\n        this.setState({\n          lntc: false\n        });\n        return;\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"card-contents\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card-content-items\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, this.props && this.props.fieldSet ? _.map(this.props.fieldSet, (element, index) => {\n      if (element === \"LOD\") {\n        return React.createElement(\"div\", {\n          className: \"display-box\",\n          key: \"LOD\" + index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, React.createElement(InputBox, {\n          label: \"LOD (in ppm)\",\n          isRequired: true,\n          type: \"text\",\n          ref: \"lod\",\n          addInputStyle: \"input-box-half\",\n          addClass: \"input-box-container-half\",\n          updateValue: e => {\n            this.setState({\n              lod: ReactDOM.findDOMNode(this.refs.lod.refs.input).value\n            }, () => {\n              this.props.setLQD_LODValues(this.state);\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }));\n      }\n\n      if (element === \"LOQ\") {\n        return React.createElement(\"div\", {\n          className: \"display-box\",\n          key: \"LOD\" + index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }, React.createElement(InputBox, {\n          label: \"LOQ (in ppm)\",\n          isRequired: true,\n          type: \"text\",\n          ref: \"loq\",\n          addInputStyle: \"input-box-half\",\n          addClass: \"input-box-container-half\",\n          updateValue: e => {\n            this.setState({\n              lod: ReactDOM.findDOMNode(this.refs.loq.refs.input).value\n            }, () => {\n              this.props.setLQD_LODValues(this.state);\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        }));\n      }\n    }) : null), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, this.props && this.props.bioburdenComponents ? \"Define TNTC and TFTC Limits\" : null), this.props && this.props.bioburdenComponents ? React.createElement(\"div\", {\n      className: \"card-content-items\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, _.map([0, 1], (el, i) => React.createElement(RadioButton, {\n      key: i + \"leucine\",\n      label: i == 0 ? \"Yes\" : \"No\",\n      isRequired: false,\n      type: \"radio\",\n      ref: i == 0 ? \"lntc_y\" : \"lntc_n\",\n      name: \"lntc\",\n      addInputStyle: \"input-box-half\",\n      addClass: \"input-box-container-half\",\n      updateValue: this.getRadioButtonResponse.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }))) : null, this.state.lntc ? React.createElement(\"div\", {\n      className: \"card-content-items\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"display-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(InputBox, {\n      label: \"LNTC (in CFU)\",\n      isRequired: true,\n      type: \"text\",\n      ref: \"lod\",\n      addInputStyle: \"input-box-half\",\n      addClass: \"input-box-container-half\",\n      updateValue: e => {\n        this.setState({\n          lod: ReactDOM.findDOMNode(this.refs.lntc.refs.input).value\n        }, () => {\n          this.props.setLQD_LODValues(this.state);\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"display-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(InputBox, {\n      label: \"LFTC (in CFU)\",\n      isRequired: true,\n      type: \"text\",\n      ref: \"lod\",\n      addInputStyle: \"input-box-half\",\n      addClass: \"input-box-container-half\",\n      updateValue: e => {\n        this.setState({\n          lod: ReactDOM.findDOMNode(this.refs.lftc.refs.input).value\n        }, () => {\n          this.props.setLQD_LODValues(this.state);\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }))) : null, React.createElement(\"div\", {\n      className: \"card-content-items\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, React.createElement(DivButton, {\n      ref: \"swab_sampling\",\n      text: this.state.divText,\n      updateValue: e => {\n        this.displayCards(SHOW_SWAB_PARAMETER);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"card-content-displayDetails\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, this.state.swabDetails), React.createElement(\"div\", {\n      className: \"card-content-items\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, React.createElement(DivButton, {\n      ref: \"rinse_sampling\",\n      text: this.state.rinseText,\n      updateValue: e => {\n        this.displayCards(SHOW_RINSE_PARAMETER);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"card-content-displayDetails\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, this.state.rinseDetails));\n  }\n\n}","map":{"version":3,"sources":["/home/vipl039/Documents/assignments/leucine_tech/src/contents/CardContents.js"],"names":["React","Component","ReactDOM","InputBox","RadioButton","DivButton","Card","_","SHOW_RINSE_PARAMETER","HIDE_RINSE_PARAMETER","SHOW_SWAB_PARAMETER","HIDE_SWAB_PARAMETER","CardContents","constructor","props","hideCards","cardType","setState","swabDetails","divText","swabDisplay","rinseDetails","rinseText","rinseDisplay","displayCards","e","state","nodeElement","callback","bind","bioburdenComponents","mountElements","target_residue_type_list","lod","loq","lntc","setLQD_LODValues","cardDetails","getRadioButtonResponse","render","fieldSet","map","element","index","findDOMNode","refs","input","value","el","i","lftc"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport ReactDOM from 'react-dom';\nimport InputBox from '../contents/InputBox/InputBox';\nimport RadioButton from '../contents/radio/radioButton';\nimport DivButton from '../contents/DivButton/DivButton';\nimport Card from '../contents/Cards/Card';\nimport _ from 'lodash';\nimport {SHOW_RINSE_PARAMETER, HIDE_RINSE_PARAMETER, SHOW_SWAB_PARAMETER, HIDE_SWAB_PARAMETER} from '../constants/config'\nexport default class CardContents extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            target_residue_type_list: [],\n            lod: \"\",\n            loq: \"\",\n            lntc: \"\",\n            swabDisplay: false,\n            rinseDisplay: false,\n            divText: `Configure swab sampling parameter`,\n            rinseText: `Configure rinse sampling parameter`,\n            swabDetails: null,\n            rinseDetails: null\n        }\n    }\n\n    hideCards = (cardType) => {\n        switch(cardType){\n            case HIDE_SWAB_PARAMETER:\n                this.setState({swabDetails: null, divText: `Configure swab sampling parameter`, swabDisplay: false})\n                return;\n            \n            case HIDE_RINSE_PARAMETER:\n                this.setState({rinseDetails: null, rinseText: `Configure rinse sampling parameter`, rinseDisplay: false})\n                return;\n        }\n    }\n\n    displayCards = (e) => {\n       \n        switch(e){\n            case SHOW_SWAB_PARAMETER:\n                if(!this.state.swabDisplay){\n                    this.setState({divText: `Remove swab sampling parameters`, swabDisplay: true}, () => {\n                        let nodeElement = (<div>\n                            <Card \n                                callback={this.callback.bind(this)} \n                                bioburdenComponents={this.props.bioburdenComponents}\n                                isRequired={[\"SOLVENT_NAME\", \"SOLVENT_QUANTITY\"]}\n                            />\n                        </div>);\n                        this.mountElements({swabDetails: nodeElement});\n                    })\n                }\n                else{\n                    this.hideCards(HIDE_SWAB_PARAMETER);\n                }\n                \n                return;\n\n            case SHOW_RINSE_PARAMETER:\n                if(!this.state.rinseDisplay){\n                    this.setState({rinseText: `Remove rinse sampling parameters`, rinseDisplay: true}, () => {\n                        let nodeElement = (<div>\n                            <Card \n                                callback={this.callback.bind(this)} \n                                \n                            />\n                        </div>);\n                        this.mountElements({rinseDetails: nodeElement});\n                    })\n                }\n                else{\n                    this.hideCards(HIDE_RINSE_PARAMETER);\n                }\n                \n                return;\n        }\n    }\n\n    callback(){\n        this.props.setLQD_LODValues(this.state);\n    }\n\n    mountElements(cardDetails){\n        this.setState(cardDetails);\n    }\n\n    getRadioButtonResponse(lntc){\n        switch(lntc){\n            case \"Yes\": \n                this.setState({lntc: true});\n                return;\n            case \"No\":\n                this.setState({lntc: false});\n                return;\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"card-contents\">\n                \n                <div className=\"card-content-items\">\n                {\n                    (this.props && this.props.fieldSet)\n                    ?\n                    _.map(this.props.fieldSet, (element, index) => {\n                        if(element===\"LOD\"){\n                                return(\n                                    <div className=\"display-box\" key={`LOD`+index}>\n                                        <InputBox \n                                            label={\"LOD (in ppm)\"}\n                                            isRequired={true}\n                                            type={\"text\"}\n                                            ref={\"lod\"}\n                                            addInputStyle={`input-box-half`}\n                                            addClass={`input-box-container-half`}\n                                            updateValue={(e) =>{\n                                                this.setState({\n                                                    lod: ReactDOM.findDOMNode(this.refs.lod.refs.input).value\n                                                },() => {\n                                                    this.props.setLQD_LODValues(this.state);\n                                                })\n                                            }}\n                                        />\n                                    </div>\n                                )\n                        }\n                        if(element===\"LOQ\"){\n                            return(\n                                <div className=\"display-box\"  key={`LOD`+index}>\n                                    <InputBox \n                                        label={\"LOQ (in ppm)\"}\n                                        isRequired={true}\n                                        type={\"text\"}\n                                        ref={\"loq\"}\n                                        addInputStyle={`input-box-half`}\n                                        addClass={`input-box-container-half`}\n                                        updateValue={(e) =>{\n                                            this.setState({\n                                                lod: ReactDOM.findDOMNode(this.refs.loq.refs.input).value\n                                            },() => {\n                                                this.props.setLQD_LODValues(this.state);\n                                            })\n                                        }}\n                                    />\n                                </div>\n                            )\n                        }\n                        \n                    })\n                    :\n                    null\n                }\n                </div>\n\n                <label>{(this.props && this.props.bioburdenComponents) ? `Define TNTC and TFTC Limits` : null}</label>\n                {\n                    (this.props && this.props.bioburdenComponents\n                        ?\n                        <div className=\"card-content-items\">\n                            {\n                                _.map([0,1], (el, i) => (\n                                    <RadioButton \n                                        key={i+\"leucine\"}\n                                        label={(i==0 ? \"Yes\" : \"No\")}\n                                        isRequired={false}\n                                        type={\"radio\"}\n                                        ref={(i==0) ? \"lntc_y\" : \"lntc_n\"}\n                                        name={\"lntc\"}\n                                        addInputStyle={`input-box-half`}\n                                        addClass={`input-box-container-half`}\n                                        updateValue={this.getRadioButtonResponse.bind(this)}\n                                    />\n                                ))\n                            }\n                        </div>\n                        :\n                        null\n                    )\n                }\n                \n\n                {\n                    (this.state.lntc)\n                        ?\n                    <div className=\"card-content-items\">\n                        <div className=\"display-box\">\n                            <InputBox \n                                label={\"LNTC (in CFU)\"}\n                                isRequired={true}\n                                type={\"text\"}\n                                ref={\"lod\"}\n                                addInputStyle={`input-box-half`}\n                                addClass={`input-box-container-half`}\n                                updateValue={(e) =>{\n                                    this.setState({\n                                        lod: ReactDOM.findDOMNode(this.refs.lntc.refs.input).value\n                                    },() => {\n                                        this.props.setLQD_LODValues(this.state);\n                                    })\n                                }}\n                            />\n                        </div>\n                        <div className=\"display-box\">\n                            <InputBox \n                                label={\"LFTC (in CFU)\"}\n                                isRequired={true}\n                                type={\"text\"}\n                                ref={\"lod\"}\n                                addInputStyle={`input-box-half`}\n                                addClass={`input-box-container-half`}\n                                updateValue={(e) =>{\n                                    this.setState({\n                                        lod: ReactDOM.findDOMNode(this.refs.lftc.refs.input).value\n                                    },() => {\n                                        this.props.setLQD_LODValues(this.state);\n                                    })\n                                }}\n                            />\n                        </div>\n                    </div>\n                        :\n                    null\n                }\n                \n                <div className=\"card-content-items\">\n                    <DivButton \n                        ref={\"swab_sampling\"}\n                        text={this.state.divText}\n                        updateValue={(e) =>{\n                                this.displayCards(SHOW_SWAB_PARAMETER);\n                            }\n                        }\n                    />\n                </div>\n                <div className=\"card-content-displayDetails\">\n                    {this.state.swabDetails}\n                </div>\n                <div className=\"card-content-items\">\n                    <DivButton \n                        ref={\"rinse_sampling\"}\n                        text={this.state.rinseText}\n                        updateValue={(e) =>{\n                                this.displayCards(SHOW_RINSE_PARAMETER);\n                            }\n                        }\n                    />\n                </div>\n                <div className=\"card-content-displayDetails\">\n                    {this.state.rinseDetails}\n                </div>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}