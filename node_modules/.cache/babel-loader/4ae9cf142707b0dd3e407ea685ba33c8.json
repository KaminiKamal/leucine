{"ast":null,"code":"var _jsxFileName = \"/home/vipl039/Documents/assignments/leucine_tech/src/contents/Cards/Card.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport _ from 'lodash';\nimport './Card.scss';\nimport InputBox from '../InputBox/InputBox';\nimport SelectBox from '../selectBox/SelectBox';\nimport DivButton from '../DivButton/DivButton';\nimport MiniCards from './MiniCards';\nimport { default as UUID } from \"node-uuid\";\nexport default class Card extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      swapSampling_API: {\n        method_used: \"\",\n        solvent_quantity: \"\",\n        solvent_name: \"\",\n        default_recovery: \"\",\n        MOC: []\n      },\n      moc_display: false,\n      divText: \"Add MOC\",\n      miniCard: [],\n      miniCardsOptions: [{\n        name: \"Stainless Steel\",\n        _id: \"1234567\",\n        key: \"STAINLESS_STEEL\"\n      }, {\n        name: \"Glass\",\n        _id: \"894RBNTNVN\",\n        key: \"GLASS\"\n      }, {\n        name: \"Teflon\",\n        _id: \"1234567UUUUU\",\n        key: \"TEFLON\"\n      }, {\n        name: \"Plastic\",\n        _id: \"874t68743y9g\",\n        key: \"PLASTIC\"\n      }]\n    };\n  } // callback(){\n  // }\n\n\n  targetResidueType() {}\n\n  deleteMiniCards(e) {\n    let prevList = this.state.miniCard;\n    console.log(\"_id\", e); // if(prevList.length===1 && e===prevList.length)\n    // {\n    //     prevList.splice(e-1, 1);\n    //     this.setState({miniCard: prevList});\n    //     return;\n    // }\n    // prevList.splice(e, 1);\n    // this.setState({miniCard: prevList})\n  }\n\n  populateMiniCards() {\n    let prevList = this.state.miniCard;\n    this.id = UUID.v4();\n    let nodeElement = React.createElement(MiniCards, {\n      key: this.state.miniCard.length,\n      _id: this.id,\n      deleteMiniCards: this.deleteMiniCards.bind(this),\n      callback: this.props.callback.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    });\n    prevList.push(nodeElement);\n    this.setState({\n      miniCard: prevList\n    });\n  }\n\n  removeMiniCards() {}\n\n  displayMiniCards() {\n    this.setState({\n      divText: \"Add Another MOC\"\n    }, () => {\n      this.populateMiniCards();\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"card-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(InputBox, {\n      label: \"Method Used\",\n      isRequired: true,\n      type: \"text\",\n      ref: \"method_used\",\n      updateValue: e => {\n        this.setState({\n          swapSampling_API: {\n            method_used: ReactDOM.findDOMNode(this.refs.method_used.refs.input).value\n          }\n        }, () => {\n          this.props.callback(this.state);\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        display: \"flex\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(InputBox, {\n      label: \"Solvent name\",\n      isRequired: true,\n      type: \"text\",\n      ref: \"solvent_name\",\n      addInputStyle: \"input-box-half\",\n      addClass: \"input-box-container-half\",\n      updateValue: e => {\n        this.setState({\n          swapSampling_API: {\n            solvent_name: ReactDOM.findDOMNode(this.refs.solvent_name.refs.input).value\n          }\n        }, () => {\n          this.props.callback(this.state);\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(InputBox, {\n      label: \"Solvent Quantity\",\n      isRequired: true,\n      type: \"text\",\n      ref: \"solvent_quantity\",\n      addInputStyle: \"input-box-half\",\n      addClass: \"input-box-container-half\",\n      updateValue: e => {\n        this.setState({\n          swapSampling_API: {\n            solvent_quantity: ReactDOM.findDOMNode(this.refs.solvent_quantity.refs.input).value\n          }\n        }, () => {\n          this.props.callback(this.state);\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }))), React.createElement(InputBox, {\n      label: \"Default Recovery\",\n      isRequired: true,\n      type: \"text\",\n      ref: \"default_recovery\",\n      updateValue: e => {\n        this.setState({\n          swapSampling_API: {\n            default_recovery: ReactDOM.findDOMNode(this.refs.default_recovery.refs.input).value\n          }\n        }, () => {\n          this.props.callback(this.state);\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        backgroundColor: '#EFEFEF',\n        padding: '1.5em 0.5em 1.5em 0.5em'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, _.map(this.state.miniCard, (_elem, _ind) => _elem), React.createElement(DivButton, {\n      ref: \"add_moc\",\n      text: this.state.divText,\n      addClass: 'miniCardButton',\n      updateValue: e => {\n        this.setState({\n          moc_display: !this.state.moc_display\n        }, () => {\n          this.displayMiniCards();\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    })))));\n  }\n\n}","map":{"version":3,"sources":["/home/vipl039/Documents/assignments/leucine_tech/src/contents/Cards/Card.js"],"names":["React","Component","ReactDOM","_","InputBox","SelectBox","DivButton","MiniCards","default","UUID","Card","constructor","props","state","swapSampling_API","method_used","solvent_quantity","solvent_name","default_recovery","MOC","moc_display","divText","miniCard","miniCardsOptions","name","_id","key","targetResidueType","deleteMiniCards","e","prevList","console","log","populateMiniCards","id","v4","nodeElement","length","bind","callback","push","setState","removeMiniCards","displayMiniCards","render","findDOMNode","refs","input","value","display","backgroundColor","padding","map","_elem","_ind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport _ from 'lodash';\nimport './Card.scss';\nimport InputBox from '../InputBox/InputBox';\nimport SelectBox from '../selectBox/SelectBox';\nimport DivButton from '../DivButton/DivButton';\nimport MiniCards from './MiniCards';\nimport {default as UUID} from \"node-uuid\";\n\nexport default class Card extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            swapSampling_API: {\n                method_used: \"\",\n                solvent_quantity: \"\",\n                solvent_name: \"\",\n                default_recovery: \"\",\n                MOC: []\n            },\n            moc_display: false,\n            divText: `Add MOC`,\n            miniCard: [],\n            miniCardsOptions: [\n                {\n                    name: \"Stainless Steel\",\n                    _id: \"1234567\",\n                    key: \"STAINLESS_STEEL\"\n                },\n                {\n                    name: \"Glass\",\n                    _id: \"894RBNTNVN\",\n                    key: \"GLASS\"\n                },\n                {\n                    name: \"Teflon\",\n                    _id: \"1234567UUUUU\",\n                    key: \"TEFLON\"\n                },\n                {\n                    name: \"Plastic\",\n                    _id: \"874t68743y9g\",\n                    key: \"PLASTIC\"\n                }\n            ]\n        }\n    }\n    // callback(){\n\n    // }\n    targetResidueType(){\n\n    }\n    deleteMiniCards(e){\n        let prevList = this.state.miniCard;\n        console.log(\"_id\", e);\n        // if(prevList.length===1 && e===prevList.length)\n        // {\n        //     prevList.splice(e-1, 1);\n        //     this.setState({miniCard: prevList});\n        //     return;\n        // }\n        // prevList.splice(e, 1);\n        // this.setState({miniCard: prevList})\n    }\n    \n    populateMiniCards(){\n        let prevList = this.state.miniCard;\n        this.id = UUID.v4();\n        let nodeElement = (\n            <MiniCards key={this.state.miniCard.length} _id={this.id} deleteMiniCards={this.deleteMiniCards.bind(this)} callback={this.props.callback.bind(this)} />\n        );\n        prevList.push(nodeElement);\n        this.setState({miniCard: prevList})\n    }\n    removeMiniCards(){\n\n    }\n    displayMiniCards(){\n        this.setState({ divText: `Add Another MOC`}, () => {\n            this.populateMiniCards();\n        });\n    }\n    render() {\n        \n        return (\n            <div className=\"card-container\">\n                <div className=\"card-content\">\n                    <InputBox \n                        label={\"Method Used\"}\n                        isRequired={true}\n                        type={\"text\"}\n                        ref={\"method_used\"}\n                        updateValue={(e) =>{\n                            this.setState({\n                                swapSampling_API: {\n                                    method_used: ReactDOM.findDOMNode(this.refs.method_used.refs.input).value\n                                }\n                            },() => {\n                                this.props.callback(this.state);\n                            })\n                        }}\n                    />\n                    <div style={{display: \"flex\"}}>\n                        <div>\n                            <InputBox \n                                label={\"Solvent name\"}\n                                isRequired={true}\n                                type={\"text\"}\n                                ref={\"solvent_name\"}\n                                addInputStyle={`input-box-half`}\n                                addClass={`input-box-container-half`}\n                                updateValue={(e) =>{\n                                    this.setState({\n                                        swapSampling_API:{\n                                            solvent_name: ReactDOM.findDOMNode(this.refs.solvent_name.refs.input).value\n                                        } \n                                    },() => {\n                                        this.props.callback(this.state);\n                                    })\n                                }}\n                            />\n                        </div>\n                        <div>\n                            <InputBox \n                                label={\"Solvent Quantity\"}\n                                isRequired={true}\n                                type={\"text\"}\n                                ref={\"solvent_quantity\"}\n                                addInputStyle={`input-box-half`}\n                                addClass={`input-box-container-half`}\n                                updateValue={(e) =>{\n                                    this.setState({\n                                        swapSampling_API:{\n                                            solvent_quantity: ReactDOM.findDOMNode(this.refs.solvent_quantity.refs.input).value\n                                        }\n                                    },() => {\n                                        this.props.callback(this.state);\n                                    })\n                                }}\n                            />\n                        </div>\n                    </div>\n                \n                    <InputBox \n                        label={\"Default Recovery\"}\n                        isRequired={true}\n                        type={\"text\"}\n                        ref={\"default_recovery\"}\n                        updateValue={(e) =>{\n                            this.setState({\n                                swapSampling_API:{\n                                    default_recovery: ReactDOM.findDOMNode(this.refs.default_recovery.refs.input).value\n                                } \n                            },() => {\n                                this.props.callback(this.state);\n                            })\n                        }}\n                    />\n                    <div>\n                        <div style={{backgroundColor: '#EFEFEF', padding: '1.5em 0.5em 1.5em 0.5em'}}>\n                            {_.map(this.state.miniCard,  (_elem, _ind) => (_elem))}\n                        \n                        <DivButton \n                            ref={\"add_moc\"}\n                            text={this.state.divText}\n                            addClass={'miniCardButton'}\n                            updateValue={(e) =>{\n                                this.setState({\n                                    moc_display: !this.state.moc_display,\n                                    \n                                },() => {\n                                    this.displayMiniCards();\n                                })\n                            }}\n                        />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}